// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aws {
namespace kinesis {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* AdditionalDimension_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdditionalDimension_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Configuration_ThreadConfig_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  AdditionalDimension_descriptor_ = file->message_type(0);
  static const int AdditionalDimension_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalDimension, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalDimension, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalDimension, granularity_),
  };
  AdditionalDimension_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdditionalDimension_descriptor_,
      AdditionalDimension::default_instance_,
      AdditionalDimension_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalDimension, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalDimension, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdditionalDimension));
  Configuration_descriptor_ = file->message_type(1);
  static const int Configuration_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, additional_metric_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, aggregation_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, aggregation_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, aggregation_max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, cloudwatch_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, cloudwatch_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, collection_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, collection_max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, connect_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, enable_core_dumps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, fail_if_throttled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, kinesis_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, kinesis_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, log_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, max_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, metrics_granularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, metrics_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, metrics_namespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, metrics_upload_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, min_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, rate_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, record_max_buffered_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, record_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, request_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, verify_certificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, thread_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, thread_pool_size_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  Configuration_ThreadConfig_descriptor_ = Configuration_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdditionalDimension_descriptor_, &AdditionalDimension::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete AdditionalDimension::default_instance_;
  delete AdditionalDimension_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete Configuration::_default_log_level_;
  delete Configuration::_default_metrics_granularity_;
  delete Configuration::_default_metrics_level_;
  delete Configuration::_default_metrics_namespace_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\024aws.kinesis.protobuf\"F\n\023"
    "AdditionalDimension\022\013\n\003key\030\001 \002(\t\022\r\n\005valu"
    "e\030\002 \002(\t\022\023\n\013granularity\030\003 \002(\t\"\254\010\n\rConfigu"
    "ration\022J\n\026additional_metric_dims\030\200\001 \003(\0132"
    ").aws.kinesis.protobuf.AdditionalDimensi"
    "on\022!\n\023aggregation_enabled\030\001 \001(\010:\004true\022)\n"
    "\025aggregation_max_count\030\002 \001(\004:\n4294967295"
    "\022#\n\024aggregation_max_size\030\003 \001(\004:\00551200\022\035\n"
    "\023cloudwatch_endpoint\030\004 \001(\t:\000\022\034\n\017cloudwat"
    "ch_port\030\005 \001(\004:\003443\022!\n\024collection_max_cou"
    "nt\030\006 \001(\004:\003500\022$\n\023collection_max_size\030\007 \001"
    "(\004:\0075242880\022\035\n\017connect_timeout\030\010 \001(\004:\00460"
    "00\022 \n\021enable_core_dumps\030\t \001(\010:\005false\022 \n\021"
    "fail_if_throttled\030\n \001(\010:\005false\022\032\n\020kinesi"
    "s_endpoint\030\013 \001(\t:\000\022\031\n\014kinesis_port\030\014 \001(\004"
    ":\003443\022\027\n\tlog_level\030\r \001(\t:\004info\022\033\n\017max_co"
    "nnections\030\016 \001(\004:\00224\022\"\n\023metrics_granulari"
    "ty\030\017 \001(\t:\005shard\022\037\n\rmetrics_level\030\020 \001(\t:\010"
    "detailed\0221\n\021metrics_namespace\030\021 \001(\t:\026Kin"
    "esisProducerLibrary\022#\n\024metrics_upload_de"
    "lay\030\022 \001(\004:\00560000\022\032\n\017min_connections\030\023 \001("
    "\004:\0011\022\027\n\nrate_limit\030\024 \001(\004:\003150\022%\n\030record_"
    "max_buffered_time\030\025 \001(\004:\003100\022\031\n\nrecord_t"
    "tl\030\026 \001(\004:\00530000\022\020\n\006region\030\027 \001(\t:\000\022\035\n\017req"
    "uest_timeout\030\030 \001(\004:\0046000\022 \n\022verify_certi"
    "ficate\030\031 \001(\010:\004true\022T\n\rthread_config\030\032 \001("
    "\01620.aws.kinesis.protobuf.Configuration.T"
    "hreadConfig:\013PER_REQUEST\022\034\n\020thread_pool_"
    "size\030\033 \001(\r:\00264\"+\n\014ThreadConfig\022\017\n\013PER_RE"
    "QUEST\020\000\022\n\n\006POOLED\020\001B2\n0com.amazonaws.ser"
    "vices.kinesis.producer.protobuf", 1231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  AdditionalDimension::default_instance_ = new AdditionalDimension();
  Configuration::_default_log_level_ =
      new ::std::string("info", 4);
  Configuration::_default_metrics_granularity_ =
      new ::std::string("shard", 5);
  Configuration::_default_metrics_level_ =
      new ::std::string("detailed", 8);
  Configuration::_default_metrics_namespace_ =
      new ::std::string("KinesisProducerLibrary", 22);
  Configuration::default_instance_ = new Configuration();
  AdditionalDimension::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AdditionalDimension::kKeyFieldNumber;
const int AdditionalDimension::kValueFieldNumber;
const int AdditionalDimension::kGranularityFieldNumber;
#endif  // !_MSC_VER

AdditionalDimension::AdditionalDimension()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.AdditionalDimension)
}

void AdditionalDimension::InitAsDefaultInstance() {
}

AdditionalDimension::AdditionalDimension(const AdditionalDimension& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.AdditionalDimension)
}

void AdditionalDimension::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  granularity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdditionalDimension::~AdditionalDimension() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.AdditionalDimension)
  SharedDtor();
}

void AdditionalDimension::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (granularity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete granularity_;
  }
  if (this != default_instance_) {
  }
}

void AdditionalDimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalDimension::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdditionalDimension_descriptor_;
}

const AdditionalDimension& AdditionalDimension::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

AdditionalDimension* AdditionalDimension::default_instance_ = NULL;

AdditionalDimension* AdditionalDimension::New() const {
  return new AdditionalDimension;
}

void AdditionalDimension::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_granularity()) {
      if (granularity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        granularity_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdditionalDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.AdditionalDimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_granularity;
        break;
      }

      // required string granularity = 3;
      case 3: {
        if (tag == 26) {
         parse_granularity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_granularity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->granularity().data(), this->granularity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "granularity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.AdditionalDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.AdditionalDimension)
  return false;
#undef DO_
}

void AdditionalDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.AdditionalDimension)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // required string granularity = 3;
  if (has_granularity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->granularity().data(), this->granularity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "granularity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->granularity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.AdditionalDimension)
}

::google::protobuf::uint8* AdditionalDimension::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.AdditionalDimension)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // required string granularity = 3;
  if (has_granularity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->granularity().data(), this->granularity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "granularity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->granularity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.AdditionalDimension)
  return target;
}

int AdditionalDimension::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // required string granularity = 3;
    if (has_granularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->granularity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalDimension::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdditionalDimension* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdditionalDimension*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdditionalDimension::MergeFrom(const AdditionalDimension& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_granularity()) {
      set_granularity(from.granularity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdditionalDimension::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalDimension::CopyFrom(const AdditionalDimension& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalDimension::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AdditionalDimension::Swap(AdditionalDimension* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(granularity_, other->granularity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdditionalDimension::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdditionalDimension_descriptor_;
  metadata.reflection = AdditionalDimension_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Configuration_ThreadConfig_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_ThreadConfig_descriptor_;
}
bool Configuration_ThreadConfig_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Configuration_ThreadConfig Configuration::PER_REQUEST;
const Configuration_ThreadConfig Configuration::POOLED;
const Configuration_ThreadConfig Configuration::ThreadConfig_MIN;
const Configuration_ThreadConfig Configuration::ThreadConfig_MAX;
const int Configuration::ThreadConfig_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Configuration::_default_log_level_ = NULL;
::std::string* Configuration::_default_metrics_granularity_ = NULL;
::std::string* Configuration::_default_metrics_level_ = NULL;
::std::string* Configuration::_default_metrics_namespace_ = NULL;
#ifndef _MSC_VER
const int Configuration::kAdditionalMetricDimsFieldNumber;
const int Configuration::kAggregationEnabledFieldNumber;
const int Configuration::kAggregationMaxCountFieldNumber;
const int Configuration::kAggregationMaxSizeFieldNumber;
const int Configuration::kCloudwatchEndpointFieldNumber;
const int Configuration::kCloudwatchPortFieldNumber;
const int Configuration::kCollectionMaxCountFieldNumber;
const int Configuration::kCollectionMaxSizeFieldNumber;
const int Configuration::kConnectTimeoutFieldNumber;
const int Configuration::kEnableCoreDumpsFieldNumber;
const int Configuration::kFailIfThrottledFieldNumber;
const int Configuration::kKinesisEndpointFieldNumber;
const int Configuration::kKinesisPortFieldNumber;
const int Configuration::kLogLevelFieldNumber;
const int Configuration::kMaxConnectionsFieldNumber;
const int Configuration::kMetricsGranularityFieldNumber;
const int Configuration::kMetricsLevelFieldNumber;
const int Configuration::kMetricsNamespaceFieldNumber;
const int Configuration::kMetricsUploadDelayFieldNumber;
const int Configuration::kMinConnectionsFieldNumber;
const int Configuration::kRateLimitFieldNumber;
const int Configuration::kRecordMaxBufferedTimeFieldNumber;
const int Configuration::kRecordTtlFieldNumber;
const int Configuration::kRegionFieldNumber;
const int Configuration::kRequestTimeoutFieldNumber;
const int Configuration::kVerifyCertificateFieldNumber;
const int Configuration::kThreadConfigFieldNumber;
const int Configuration::kThreadPoolSizeFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Configuration)
}

void Configuration::InitAsDefaultInstance() {
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Configuration)
}

void Configuration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aggregation_enabled_ = true;
  aggregation_max_count_ = GOOGLE_ULONGLONG(4294967295);
  aggregation_max_size_ = GOOGLE_ULONGLONG(51200);
  cloudwatch_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloudwatch_port_ = GOOGLE_ULONGLONG(443);
  collection_max_count_ = GOOGLE_ULONGLONG(500);
  collection_max_size_ = GOOGLE_ULONGLONG(5242880);
  connect_timeout_ = GOOGLE_ULONGLONG(6000);
  enable_core_dumps_ = false;
  fail_if_throttled_ = false;
  kinesis_endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kinesis_port_ = GOOGLE_ULONGLONG(443);
  log_level_ = const_cast< ::std::string*>(_default_log_level_);
  max_connections_ = GOOGLE_ULONGLONG(24);
  metrics_granularity_ = const_cast< ::std::string*>(_default_metrics_granularity_);
  metrics_level_ = const_cast< ::std::string*>(_default_metrics_level_);
  metrics_namespace_ = const_cast< ::std::string*>(_default_metrics_namespace_);
  metrics_upload_delay_ = GOOGLE_ULONGLONG(60000);
  min_connections_ = GOOGLE_ULONGLONG(1);
  rate_limit_ = GOOGLE_ULONGLONG(150);
  record_max_buffered_time_ = GOOGLE_ULONGLONG(100);
  record_ttl_ = GOOGLE_ULONGLONG(30000);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_timeout_ = GOOGLE_ULONGLONG(6000);
  verify_certificate_ = true;
  thread_config_ = 0;
  thread_pool_size_ = 64u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (cloudwatch_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cloudwatch_endpoint_;
  }
  if (kinesis_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kinesis_endpoint_;
  }
  if (log_level_ != _default_log_level_) {
    delete log_level_;
  }
  if (metrics_granularity_ != _default_metrics_granularity_) {
    delete metrics_granularity_;
  }
  if (metrics_level_ != _default_metrics_level_) {
    delete metrics_level_;
  }
  if (metrics_namespace_ != _default_metrics_namespace_) {
    delete metrics_namespace_;
  }
  if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete region_;
  }
  if (this != default_instance_) {
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Configuration*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    aggregation_enabled_ = true;
    aggregation_max_count_ = GOOGLE_ULONGLONG(4294967295);
    aggregation_max_size_ = GOOGLE_ULONGLONG(51200);
    if (has_cloudwatch_endpoint()) {
      if (cloudwatch_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cloudwatch_endpoint_->clear();
      }
    }
    cloudwatch_port_ = GOOGLE_ULONGLONG(443);
    collection_max_count_ = GOOGLE_ULONGLONG(500);
    collection_max_size_ = GOOGLE_ULONGLONG(5242880);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(enable_core_dumps_, fail_if_throttled_);
    connect_timeout_ = GOOGLE_ULONGLONG(6000);
    if (has_kinesis_endpoint()) {
      if (kinesis_endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        kinesis_endpoint_->clear();
      }
    }
    kinesis_port_ = GOOGLE_ULONGLONG(443);
    if (has_log_level()) {
      if (log_level_ != _default_log_level_) {
        log_level_->assign(*_default_log_level_);
      }
    }
    max_connections_ = GOOGLE_ULONGLONG(24);
    if (has_metrics_granularity()) {
      if (metrics_granularity_ != _default_metrics_granularity_) {
        metrics_granularity_->assign(*_default_metrics_granularity_);
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_metrics_level()) {
      if (metrics_level_ != _default_metrics_level_) {
        metrics_level_->assign(*_default_metrics_level_);
      }
    }
    if (has_metrics_namespace()) {
      if (metrics_namespace_ != _default_metrics_namespace_) {
        metrics_namespace_->assign(*_default_metrics_namespace_);
      }
    }
    metrics_upload_delay_ = GOOGLE_ULONGLONG(60000);
    min_connections_ = GOOGLE_ULONGLONG(1);
    rate_limit_ = GOOGLE_ULONGLONG(150);
    record_max_buffered_time_ = GOOGLE_ULONGLONG(100);
    record_ttl_ = GOOGLE_ULONGLONG(30000);
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        region_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 251658240) {
    request_timeout_ = GOOGLE_ULONGLONG(6000);
    verify_certificate_ = true;
    thread_config_ = 0;
    thread_pool_size_ = 64u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  additional_metric_dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Configuration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool aggregation_enabled = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aggregation_enabled_)));
          set_has_aggregation_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aggregation_max_count;
        break;
      }

      // optional uint64 aggregation_max_count = 2 [default = 4294967295];
      case 2: {
        if (tag == 16) {
         parse_aggregation_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aggregation_max_count_)));
          set_has_aggregation_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aggregation_max_size;
        break;
      }

      // optional uint64 aggregation_max_size = 3 [default = 51200];
      case 3: {
        if (tag == 24) {
         parse_aggregation_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aggregation_max_size_)));
          set_has_aggregation_max_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cloudwatch_endpoint;
        break;
      }

      // optional string cloudwatch_endpoint = 4 [default = ""];
      case 4: {
        if (tag == 34) {
         parse_cloudwatch_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloudwatch_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cloudwatch_endpoint().data(), this->cloudwatch_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cloudwatch_endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cloudwatch_port;
        break;
      }

      // optional uint64 cloudwatch_port = 5 [default = 443];
      case 5: {
        if (tag == 40) {
         parse_cloudwatch_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cloudwatch_port_)));
          set_has_cloudwatch_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_collection_max_count;
        break;
      }

      // optional uint64 collection_max_count = 6 [default = 500];
      case 6: {
        if (tag == 48) {
         parse_collection_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_max_count_)));
          set_has_collection_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_collection_max_size;
        break;
      }

      // optional uint64 collection_max_size = 7 [default = 5242880];
      case 7: {
        if (tag == 56) {
         parse_collection_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_max_size_)));
          set_has_collection_max_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_connect_timeout;
        break;
      }

      // optional uint64 connect_timeout = 8 [default = 6000];
      case 8: {
        if (tag == 64) {
         parse_connect_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_timeout_)));
          set_has_connect_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enable_core_dumps;
        break;
      }

      // optional bool enable_core_dumps = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_enable_core_dumps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_core_dumps_)));
          set_has_enable_core_dumps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fail_if_throttled;
        break;
      }

      // optional bool fail_if_throttled = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_fail_if_throttled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_if_throttled_)));
          set_has_fail_if_throttled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_kinesis_endpoint;
        break;
      }

      // optional string kinesis_endpoint = 11 [default = ""];
      case 11: {
        if (tag == 90) {
         parse_kinesis_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kinesis_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kinesis_endpoint().data(), this->kinesis_endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kinesis_endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_kinesis_port;
        break;
      }

      // optional uint64 kinesis_port = 12 [default = 443];
      case 12: {
        if (tag == 96) {
         parse_kinesis_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kinesis_port_)));
          set_has_kinesis_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_log_level;
        break;
      }

      // optional string log_level = 13 [default = "info"];
      case 13: {
        if (tag == 106) {
         parse_log_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_level().data(), this->log_level().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log_level");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_max_connections;
        break;
      }

      // optional uint64 max_connections = 14 [default = 24];
      case 14: {
        if (tag == 112) {
         parse_max_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_connections_)));
          set_has_max_connections();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_metrics_granularity;
        break;
      }

      // optional string metrics_granularity = 15 [default = "shard"];
      case 15: {
        if (tag == 122) {
         parse_metrics_granularity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metrics_granularity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metrics_granularity().data(), this->metrics_granularity().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics_granularity");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_metrics_level;
        break;
      }

      // optional string metrics_level = 16 [default = "detailed"];
      case 16: {
        if (tag == 130) {
         parse_metrics_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metrics_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metrics_level().data(), this->metrics_level().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics_level");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_metrics_namespace;
        break;
      }

      // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
      case 17: {
        if (tag == 138) {
         parse_metrics_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metrics_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metrics_namespace().data(), this->metrics_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics_namespace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_metrics_upload_delay;
        break;
      }

      // optional uint64 metrics_upload_delay = 18 [default = 60000];
      case 18: {
        if (tag == 144) {
         parse_metrics_upload_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &metrics_upload_delay_)));
          set_has_metrics_upload_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_min_connections;
        break;
      }

      // optional uint64 min_connections = 19 [default = 1];
      case 19: {
        if (tag == 152) {
         parse_min_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_connections_)));
          set_has_min_connections();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_rate_limit;
        break;
      }

      // optional uint64 rate_limit = 20 [default = 150];
      case 20: {
        if (tag == 160) {
         parse_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rate_limit_)));
          set_has_rate_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_record_max_buffered_time;
        break;
      }

      // optional uint64 record_max_buffered_time = 21 [default = 100];
      case 21: {
        if (tag == 168) {
         parse_record_max_buffered_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_max_buffered_time_)));
          set_has_record_max_buffered_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_record_ttl;
        break;
      }

      // optional uint64 record_ttl = 22 [default = 30000];
      case 22: {
        if (tag == 176) {
         parse_record_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_ttl_)));
          set_has_record_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_region;
        break;
      }

      // optional string region = 23 [default = ""];
      case 23: {
        if (tag == 186) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_request_timeout;
        break;
      }

      // optional uint64 request_timeout = 24 [default = 6000];
      case 24: {
        if (tag == 192) {
         parse_request_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_timeout_)));
          set_has_request_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_verify_certificate;
        break;
      }

      // optional bool verify_certificate = 25 [default = true];
      case 25: {
        if (tag == 200) {
         parse_verify_certificate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verify_certificate_)));
          set_has_verify_certificate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_thread_config;
        break;
      }

      // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 26 [default = PER_REQUEST];
      case 26: {
        if (tag == 208) {
         parse_thread_config:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::aws::kinesis::protobuf::Configuration_ThreadConfig_IsValid(value)) {
            set_thread_config(static_cast< ::aws::kinesis::protobuf::Configuration_ThreadConfig >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_thread_pool_size;
        break;
      }

      // optional uint32 thread_pool_size = 27 [default = 64];
      case 27: {
        if (tag == 216) {
         parse_thread_pool_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_pool_size_)));
          set_has_thread_pool_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_additional_metric_dims;
        break;
      }

      // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
      case 128: {
        if (tag == 1026) {
         parse_additional_metric_dims:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_metric_dims()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1026)) goto parse_additional_metric_dims;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Configuration)
  return false;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Configuration)
  // optional bool aggregation_enabled = 1 [default = true];
  if (has_aggregation_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->aggregation_enabled(), output);
  }

  // optional uint64 aggregation_max_count = 2 [default = 4294967295];
  if (has_aggregation_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->aggregation_max_count(), output);
  }

  // optional uint64 aggregation_max_size = 3 [default = 51200];
  if (has_aggregation_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->aggregation_max_size(), output);
  }

  // optional string cloudwatch_endpoint = 4 [default = ""];
  if (has_cloudwatch_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudwatch_endpoint().data(), this->cloudwatch_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudwatch_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cloudwatch_endpoint(), output);
  }

  // optional uint64 cloudwatch_port = 5 [default = 443];
  if (has_cloudwatch_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cloudwatch_port(), output);
  }

  // optional uint64 collection_max_count = 6 [default = 500];
  if (has_collection_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->collection_max_count(), output);
  }

  // optional uint64 collection_max_size = 7 [default = 5242880];
  if (has_collection_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->collection_max_size(), output);
  }

  // optional uint64 connect_timeout = 8 [default = 6000];
  if (has_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->connect_timeout(), output);
  }

  // optional bool enable_core_dumps = 9 [default = false];
  if (has_enable_core_dumps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_core_dumps(), output);
  }

  // optional bool fail_if_throttled = 10 [default = false];
  if (has_fail_if_throttled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fail_if_throttled(), output);
  }

  // optional string kinesis_endpoint = 11 [default = ""];
  if (has_kinesis_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kinesis_endpoint().data(), this->kinesis_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kinesis_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->kinesis_endpoint(), output);
  }

  // optional uint64 kinesis_port = 12 [default = 443];
  if (has_kinesis_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->kinesis_port(), output);
  }

  // optional string log_level = 13 [default = "info"];
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_level().data(), this->log_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->log_level(), output);
  }

  // optional uint64 max_connections = 14 [default = 24];
  if (has_max_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->max_connections(), output);
  }

  // optional string metrics_granularity = 15 [default = "shard"];
  if (has_metrics_granularity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_granularity().data(), this->metrics_granularity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics_granularity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->metrics_granularity(), output);
  }

  // optional string metrics_level = 16 [default = "detailed"];
  if (has_metrics_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_level().data(), this->metrics_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics_level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->metrics_level(), output);
  }

  // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
  if (has_metrics_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_namespace().data(), this->metrics_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics_namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->metrics_namespace(), output);
  }

  // optional uint64 metrics_upload_delay = 18 [default = 60000];
  if (has_metrics_upload_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->metrics_upload_delay(), output);
  }

  // optional uint64 min_connections = 19 [default = 1];
  if (has_min_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->min_connections(), output);
  }

  // optional uint64 rate_limit = 20 [default = 150];
  if (has_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->rate_limit(), output);
  }

  // optional uint64 record_max_buffered_time = 21 [default = 100];
  if (has_record_max_buffered_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->record_max_buffered_time(), output);
  }

  // optional uint64 record_ttl = 22 [default = 30000];
  if (has_record_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->record_ttl(), output);
  }

  // optional string region = 23 [default = ""];
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->region(), output);
  }

  // optional uint64 request_timeout = 24 [default = 6000];
  if (has_request_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->request_timeout(), output);
  }

  // optional bool verify_certificate = 25 [default = true];
  if (has_verify_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->verify_certificate(), output);
  }

  // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 26 [default = PER_REQUEST];
  if (has_thread_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->thread_config(), output);
  }

  // optional uint32 thread_pool_size = 27 [default = 64];
  if (has_thread_pool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->thread_pool_size(), output);
  }

  // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
  for (int i = 0; i < this->additional_metric_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      128, this->additional_metric_dims(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Configuration)
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Configuration)
  // optional bool aggregation_enabled = 1 [default = true];
  if (has_aggregation_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->aggregation_enabled(), target);
  }

  // optional uint64 aggregation_max_count = 2 [default = 4294967295];
  if (has_aggregation_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->aggregation_max_count(), target);
  }

  // optional uint64 aggregation_max_size = 3 [default = 51200];
  if (has_aggregation_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->aggregation_max_size(), target);
  }

  // optional string cloudwatch_endpoint = 4 [default = ""];
  if (has_cloudwatch_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudwatch_endpoint().data(), this->cloudwatch_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cloudwatch_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cloudwatch_endpoint(), target);
  }

  // optional uint64 cloudwatch_port = 5 [default = 443];
  if (has_cloudwatch_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cloudwatch_port(), target);
  }

  // optional uint64 collection_max_count = 6 [default = 500];
  if (has_collection_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->collection_max_count(), target);
  }

  // optional uint64 collection_max_size = 7 [default = 5242880];
  if (has_collection_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->collection_max_size(), target);
  }

  // optional uint64 connect_timeout = 8 [default = 6000];
  if (has_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->connect_timeout(), target);
  }

  // optional bool enable_core_dumps = 9 [default = false];
  if (has_enable_core_dumps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_core_dumps(), target);
  }

  // optional bool fail_if_throttled = 10 [default = false];
  if (has_fail_if_throttled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fail_if_throttled(), target);
  }

  // optional string kinesis_endpoint = 11 [default = ""];
  if (has_kinesis_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kinesis_endpoint().data(), this->kinesis_endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kinesis_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->kinesis_endpoint(), target);
  }

  // optional uint64 kinesis_port = 12 [default = 443];
  if (has_kinesis_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->kinesis_port(), target);
  }

  // optional string log_level = 13 [default = "info"];
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_level().data(), this->log_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->log_level(), target);
  }

  // optional uint64 max_connections = 14 [default = 24];
  if (has_max_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->max_connections(), target);
  }

  // optional string metrics_granularity = 15 [default = "shard"];
  if (has_metrics_granularity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_granularity().data(), this->metrics_granularity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics_granularity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->metrics_granularity(), target);
  }

  // optional string metrics_level = 16 [default = "detailed"];
  if (has_metrics_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_level().data(), this->metrics_level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics_level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->metrics_level(), target);
  }

  // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
  if (has_metrics_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_namespace().data(), this->metrics_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics_namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->metrics_namespace(), target);
  }

  // optional uint64 metrics_upload_delay = 18 [default = 60000];
  if (has_metrics_upload_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->metrics_upload_delay(), target);
  }

  // optional uint64 min_connections = 19 [default = 1];
  if (has_min_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->min_connections(), target);
  }

  // optional uint64 rate_limit = 20 [default = 150];
  if (has_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->rate_limit(), target);
  }

  // optional uint64 record_max_buffered_time = 21 [default = 100];
  if (has_record_max_buffered_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->record_max_buffered_time(), target);
  }

  // optional uint64 record_ttl = 22 [default = 30000];
  if (has_record_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->record_ttl(), target);
  }

  // optional string region = 23 [default = ""];
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->region(), target);
  }

  // optional uint64 request_timeout = 24 [default = 6000];
  if (has_request_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->request_timeout(), target);
  }

  // optional bool verify_certificate = 25 [default = true];
  if (has_verify_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->verify_certificate(), target);
  }

  // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 26 [default = PER_REQUEST];
  if (has_thread_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->thread_config(), target);
  }

  // optional uint32 thread_pool_size = 27 [default = 64];
  if (has_thread_pool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->thread_pool_size(), target);
  }

  // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
  for (int i = 0; i < this->additional_metric_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        128, this->additional_metric_dims(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Configuration)
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool aggregation_enabled = 1 [default = true];
    if (has_aggregation_enabled()) {
      total_size += 1 + 1;
    }

    // optional uint64 aggregation_max_count = 2 [default = 4294967295];
    if (has_aggregation_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aggregation_max_count());
    }

    // optional uint64 aggregation_max_size = 3 [default = 51200];
    if (has_aggregation_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aggregation_max_size());
    }

    // optional string cloudwatch_endpoint = 4 [default = ""];
    if (has_cloudwatch_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloudwatch_endpoint());
    }

    // optional uint64 cloudwatch_port = 5 [default = 443];
    if (has_cloudwatch_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cloudwatch_port());
    }

    // optional uint64 collection_max_count = 6 [default = 500];
    if (has_collection_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collection_max_count());
    }

    // optional uint64 collection_max_size = 7 [default = 5242880];
    if (has_collection_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collection_max_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 connect_timeout = 8 [default = 6000];
    if (has_connect_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->connect_timeout());
    }

    // optional bool enable_core_dumps = 9 [default = false];
    if (has_enable_core_dumps()) {
      total_size += 1 + 1;
    }

    // optional bool fail_if_throttled = 10 [default = false];
    if (has_fail_if_throttled()) {
      total_size += 1 + 1;
    }

    // optional string kinesis_endpoint = 11 [default = ""];
    if (has_kinesis_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kinesis_endpoint());
    }

    // optional uint64 kinesis_port = 12 [default = 443];
    if (has_kinesis_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kinesis_port());
    }

    // optional string log_level = 13 [default = "info"];
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_level());
    }

    // optional uint64 max_connections = 14 [default = 24];
    if (has_max_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_connections());
    }

    // optional string metrics_granularity = 15 [default = "shard"];
    if (has_metrics_granularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metrics_granularity());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string metrics_level = 16 [default = "detailed"];
    if (has_metrics_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metrics_level());
    }

    // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
    if (has_metrics_namespace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metrics_namespace());
    }

    // optional uint64 metrics_upload_delay = 18 [default = 60000];
    if (has_metrics_upload_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->metrics_upload_delay());
    }

    // optional uint64 min_connections = 19 [default = 1];
    if (has_min_connections()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_connections());
    }

    // optional uint64 rate_limit = 20 [default = 150];
    if (has_rate_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rate_limit());
    }

    // optional uint64 record_max_buffered_time = 21 [default = 100];
    if (has_record_max_buffered_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_max_buffered_time());
    }

    // optional uint64 record_ttl = 22 [default = 30000];
    if (has_record_ttl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_ttl());
    }

    // optional string region = 23 [default = ""];
    if (has_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 request_timeout = 24 [default = 6000];
    if (has_request_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_timeout());
    }

    // optional bool verify_certificate = 25 [default = true];
    if (has_verify_certificate()) {
      total_size += 2 + 1;
    }

    // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 26 [default = PER_REQUEST];
    if (has_thread_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->thread_config());
    }

    // optional uint32 thread_pool_size = 27 [default = 64];
    if (has_thread_pool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_pool_size());
    }

  }
  // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
  total_size += 2 * this->additional_metric_dims_size();
  for (int i = 0; i < this->additional_metric_dims_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additional_metric_dims(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  additional_metric_dims_.MergeFrom(from.additional_metric_dims_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_aggregation_enabled()) {
      set_aggregation_enabled(from.aggregation_enabled());
    }
    if (from.has_aggregation_max_count()) {
      set_aggregation_max_count(from.aggregation_max_count());
    }
    if (from.has_aggregation_max_size()) {
      set_aggregation_max_size(from.aggregation_max_size());
    }
    if (from.has_cloudwatch_endpoint()) {
      set_cloudwatch_endpoint(from.cloudwatch_endpoint());
    }
    if (from.has_cloudwatch_port()) {
      set_cloudwatch_port(from.cloudwatch_port());
    }
    if (from.has_collection_max_count()) {
      set_collection_max_count(from.collection_max_count());
    }
    if (from.has_collection_max_size()) {
      set_collection_max_size(from.collection_max_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connect_timeout()) {
      set_connect_timeout(from.connect_timeout());
    }
    if (from.has_enable_core_dumps()) {
      set_enable_core_dumps(from.enable_core_dumps());
    }
    if (from.has_fail_if_throttled()) {
      set_fail_if_throttled(from.fail_if_throttled());
    }
    if (from.has_kinesis_endpoint()) {
      set_kinesis_endpoint(from.kinesis_endpoint());
    }
    if (from.has_kinesis_port()) {
      set_kinesis_port(from.kinesis_port());
    }
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_max_connections()) {
      set_max_connections(from.max_connections());
    }
    if (from.has_metrics_granularity()) {
      set_metrics_granularity(from.metrics_granularity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_metrics_level()) {
      set_metrics_level(from.metrics_level());
    }
    if (from.has_metrics_namespace()) {
      set_metrics_namespace(from.metrics_namespace());
    }
    if (from.has_metrics_upload_delay()) {
      set_metrics_upload_delay(from.metrics_upload_delay());
    }
    if (from.has_min_connections()) {
      set_min_connections(from.min_connections());
    }
    if (from.has_rate_limit()) {
      set_rate_limit(from.rate_limit());
    }
    if (from.has_record_max_buffered_time()) {
      set_record_max_buffered_time(from.record_max_buffered_time());
    }
    if (from.has_record_ttl()) {
      set_record_ttl(from.record_ttl());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_request_timeout()) {
      set_request_timeout(from.request_timeout());
    }
    if (from.has_verify_certificate()) {
      set_verify_certificate(from.verify_certificate());
    }
    if (from.has_thread_config()) {
      set_thread_config(from.thread_config());
    }
    if (from.has_thread_pool_size()) {
      set_thread_pool_size(from.thread_pool_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->additional_metric_dims())) return false;
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    additional_metric_dims_.Swap(&other->additional_metric_dims_);
    std::swap(aggregation_enabled_, other->aggregation_enabled_);
    std::swap(aggregation_max_count_, other->aggregation_max_count_);
    std::swap(aggregation_max_size_, other->aggregation_max_size_);
    std::swap(cloudwatch_endpoint_, other->cloudwatch_endpoint_);
    std::swap(cloudwatch_port_, other->cloudwatch_port_);
    std::swap(collection_max_count_, other->collection_max_count_);
    std::swap(collection_max_size_, other->collection_max_size_);
    std::swap(connect_timeout_, other->connect_timeout_);
    std::swap(enable_core_dumps_, other->enable_core_dumps_);
    std::swap(fail_if_throttled_, other->fail_if_throttled_);
    std::swap(kinesis_endpoint_, other->kinesis_endpoint_);
    std::swap(kinesis_port_, other->kinesis_port_);
    std::swap(log_level_, other->log_level_);
    std::swap(max_connections_, other->max_connections_);
    std::swap(metrics_granularity_, other->metrics_granularity_);
    std::swap(metrics_level_, other->metrics_level_);
    std::swap(metrics_namespace_, other->metrics_namespace_);
    std::swap(metrics_upload_delay_, other->metrics_upload_delay_);
    std::swap(min_connections_, other->min_connections_);
    std::swap(rate_limit_, other->rate_limit_);
    std::swap(record_max_buffered_time_, other->record_max_buffered_time_);
    std::swap(record_ttl_, other->record_ttl_);
    std::swap(region_, other->region_);
    std::swap(request_timeout_, other->request_timeout_);
    std::swap(verify_certificate_, other->verify_certificate_);
    std::swap(thread_config_, other->thread_config_);
    std::swap(thread_pool_size_, other->thread_pool_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws

// @@protoc_insertion_point(global_scope)
