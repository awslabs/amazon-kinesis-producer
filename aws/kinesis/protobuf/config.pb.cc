// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalDimension_config_2eproto;
namespace aws {
namespace kinesis {
namespace protobuf {
class AdditionalDimensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalDimension> _instance;
} _AdditionalDimension_default_instance_;
class ConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Configuration> _instance;
} _Configuration_default_instance_;
}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws
static void InitDefaultsscc_info_AdditionalDimension_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aws::kinesis::protobuf::_AdditionalDimension_default_instance_;
    new (ptr) ::aws::kinesis::protobuf::AdditionalDimension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aws::kinesis::protobuf::AdditionalDimension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalDimension_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdditionalDimension_config_2eproto}, {}};

static void InitDefaultsscc_info_Configuration_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.DefaultConstruct();
  *::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get_mutable() = std::string("info", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get_mutable());
  ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.DefaultConstruct();
  *::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get_mutable() = std::string("shard", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get_mutable());
  ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.DefaultConstruct();
  *::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get_mutable() = std::string("detailed", 8);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get_mutable());
  ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.DefaultConstruct();
  *::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get_mutable() = std::string("KinesisProducerLibrary", 22);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get_mutable());
  {
    void* ptr = &::aws::kinesis::protobuf::_Configuration_default_instance_;
    new (ptr) ::aws::kinesis::protobuf::Configuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aws::kinesis::protobuf::Configuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Configuration_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Configuration_config_2eproto}, {
      &scc_info_AdditionalDimension_config_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_config_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::AdditionalDimension, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::AdditionalDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::AdditionalDimension, key_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::AdditionalDimension, value_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::AdditionalDimension, granularity_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, additional_metric_dims_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, aggregation_enabled_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, aggregation_max_count_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, aggregation_max_size_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, cloudwatch_endpoint_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, cloudwatch_port_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, collection_max_count_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, collection_max_size_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, connect_timeout_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, enable_core_dumps_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, fail_if_throttled_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, kinesis_endpoint_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, kinesis_port_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, log_level_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, max_connections_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, metrics_granularity_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, metrics_level_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, metrics_namespace_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, metrics_upload_delay_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, min_connections_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, rate_limit_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, record_max_buffered_time_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, record_ttl_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, region_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, request_timeout_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, verify_certificate_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, proxy_host_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, proxy_port_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, proxy_user_name_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, proxy_password_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, thread_config_),
  PROTOBUF_FIELD_OFFSET(::aws::kinesis::protobuf::Configuration, thread_pool_size_),
  ~0u,
  23,
  13,
  14,
  0,
  15,
  16,
  17,
  18,
  10,
  11,
  1,
  19,
  2,
  20,
  3,
  4,
  5,
  21,
  22,
  26,
  27,
  28,
  6,
  29,
  24,
  7,
  30,
  8,
  9,
  12,
  25,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::aws::kinesis::protobuf::AdditionalDimension)},
  { 11, 48, sizeof(::aws::kinesis::protobuf::Configuration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aws::kinesis::protobuf::_AdditionalDimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aws::kinesis::protobuf::_Configuration_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\024aws.kinesis.protobuf\"F\n\023"
  "AdditionalDimension\022\013\n\003key\030\001 \002(\t\022\r\n\005valu"
  "e\030\002 \002(\t\022\023\n\013granularity\030\003 \002(\t\"\220\t\n\rConfigu"
  "ration\022J\n\026additional_metric_dims\030\200\001 \003(\0132"
  ").aws.kinesis.protobuf.AdditionalDimensi"
  "on\022!\n\023aggregation_enabled\030\001 \001(\010:\004true\022)\n"
  "\025aggregation_max_count\030\002 \001(\004:\n4294967295"
  "\022#\n\024aggregation_max_size\030\003 \001(\004:\00551200\022\035\n"
  "\023cloudwatch_endpoint\030\004 \001(\t:\000\022\034\n\017cloudwat"
  "ch_port\030\005 \001(\004:\003443\022!\n\024collection_max_cou"
  "nt\030\006 \001(\004:\003500\022$\n\023collection_max_size\030\007 \001"
  "(\004:\0075242880\022\035\n\017connect_timeout\030\010 \001(\004:\00460"
  "00\022 \n\021enable_core_dumps\030\t \001(\010:\005false\022 \n\021"
  "fail_if_throttled\030\n \001(\010:\005false\022\032\n\020kinesi"
  "s_endpoint\030\013 \001(\t:\000\022\031\n\014kinesis_port\030\014 \001(\004"
  ":\003443\022\027\n\tlog_level\030\r \001(\t:\004info\022\033\n\017max_co"
  "nnections\030\016 \001(\004:\00224\022\"\n\023metrics_granulari"
  "ty\030\017 \001(\t:\005shard\022\037\n\rmetrics_level\030\020 \001(\t:\010"
  "detailed\0221\n\021metrics_namespace\030\021 \001(\t:\026Kin"
  "esisProducerLibrary\022#\n\024metrics_upload_de"
  "lay\030\022 \001(\004:\00560000\022\032\n\017min_connections\030\023 \001("
  "\004:\0011\022\027\n\nrate_limit\030\024 \001(\004:\003150\022%\n\030record_"
  "max_buffered_time\030\025 \001(\004:\003100\022\031\n\nrecord_t"
  "tl\030\026 \001(\004:\00530000\022\020\n\006region\030\027 \001(\t:\000\022\035\n\017req"
  "uest_timeout\030\030 \001(\004:\0046000\022 \n\022verify_certi"
  "ficate\030\031 \001(\010:\004true\022\024\n\nproxy_host\030\032 \001(\t:\000"
  "\022\027\n\nproxy_port\030\033 \001(\004:\003443\022\031\n\017proxy_user_"
  "name\030\034 \001(\t:\000\022\030\n\016proxy_password\030\035 \001(\t:\000\022T"
  "\n\rthread_config\030\036 \001(\01620.aws.kinesis.prot"
  "obuf.Configuration.ThreadConfig:\013PER_REQ"
  "UEST\022\034\n\020thread_pool_size\030\037 \001(\r:\00264\"+\n\014Th"
  "readConfig\022\017\n\013PER_REQUEST\020\000\022\n\n\006POOLED\020\001B"
  "2\n0com.amazonaws.services.kinesis.produc"
  "er.protobuf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_2eproto_sccs[2] = {
  &scc_info_AdditionalDimension_config_2eproto.base,
  &scc_info_Configuration_config_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
static bool descriptor_table_config_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  &descriptor_table_config_2eproto_initialized, descriptor_table_protodef_config_2eproto, "config.proto", 1331,
  &descriptor_table_config_2eproto_once, descriptor_table_config_2eproto_sccs, descriptor_table_config_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, 2, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_2eproto), true);
namespace aws {
namespace kinesis {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Configuration_ThreadConfig_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[0];
}
bool Configuration_ThreadConfig_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Configuration_ThreadConfig Configuration::PER_REQUEST;
constexpr Configuration_ThreadConfig Configuration::POOLED;
constexpr Configuration_ThreadConfig Configuration::ThreadConfig_MIN;
constexpr Configuration_ThreadConfig Configuration::ThreadConfig_MAX;
constexpr int Configuration::ThreadConfig_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AdditionalDimension::InitAsDefaultInstance() {
}
class AdditionalDimension::_Internal {
 public:
  using HasBits = decltype(std::declval<AdditionalDimension>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_granularity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AdditionalDimension::AdditionalDimension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.AdditionalDimension)
}
AdditionalDimension::AdditionalDimension(const AdditionalDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  granularity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_granularity()) {
    granularity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.granularity_);
  }
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.AdditionalDimension)
}

void AdditionalDimension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalDimension_config_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  granularity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdditionalDimension::~AdditionalDimension() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.AdditionalDimension)
  SharedDtor();
}

void AdditionalDimension::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  granularity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdditionalDimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalDimension& AdditionalDimension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalDimension_config_2eproto.base);
  return *internal_default_instance();
}


void AdditionalDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:aws.kinesis.protobuf.AdditionalDimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      granularity_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AdditionalDimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.AdditionalDimension.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.AdditionalDimension.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string granularity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_granularity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.AdditionalDimension.granularity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalDimension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.AdditionalDimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.AdditionalDimension.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.AdditionalDimension.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // required string granularity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_granularity().data(), static_cast<int>(this->_internal_granularity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.AdditionalDimension.granularity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_granularity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.AdditionalDimension)
  return target;
}

size_t AdditionalDimension::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aws.kinesis.protobuf.AdditionalDimension)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_granularity()) {
    // required string granularity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_granularity());
  }

  return total_size;
}
size_t AdditionalDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aws.kinesis.protobuf.AdditionalDimension)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required string granularity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_granularity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalDimension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aws.kinesis.protobuf.AdditionalDimension)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalDimension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalDimension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aws.kinesis.protobuf.AdditionalDimension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aws.kinesis.protobuf.AdditionalDimension)
    MergeFrom(*source);
  }
}

void AdditionalDimension::MergeFrom(const AdditionalDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aws.kinesis.protobuf.AdditionalDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      granularity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.granularity_);
    }
  }
}

void AdditionalDimension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aws.kinesis.protobuf.AdditionalDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalDimension::CopyFrom(const AdditionalDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aws.kinesis.protobuf.AdditionalDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalDimension::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AdditionalDimension::InternalSwap(AdditionalDimension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  granularity_.Swap(&other->granularity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalDimension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Configuration::InitAsDefaultInstance() {
}
class Configuration::_Internal {
 public:
  using HasBits = decltype(std::declval<Configuration>()._has_bits_);
  static void set_has_aggregation_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_aggregation_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_aggregation_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cloudwatch_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cloudwatch_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_collection_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_collection_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_connect_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_core_dumps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fail_if_throttled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_kinesis_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kinesis_port(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_log_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_metrics_granularity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_metrics_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_metrics_namespace(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_metrics_upload_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_min_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_rate_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_record_max_buffered_time(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_record_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_request_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_verify_certificate(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_proxy_host(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_proxy_port(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_proxy_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_proxy_password(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_thread_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_thread_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Configuration::_i_give_permission_to_break_this_code_default_log_level_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Configuration::_i_give_permission_to_break_this_code_default_metrics_level_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_;
Configuration::Configuration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      additional_metric_dims_(from.additional_metric_dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cloudwatch_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cloudwatch_endpoint()) {
    cloudwatch_endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cloudwatch_endpoint_);
  }
  kinesis_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kinesis_endpoint()) {
    kinesis_endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kinesis_endpoint_);
  }
  log_level_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get());
  if (from._internal_has_log_level()) {
    log_level_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get(), from.log_level_);
  }
  metrics_granularity_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get());
  if (from._internal_has_metrics_granularity()) {
    metrics_granularity_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get(), from.metrics_granularity_);
  }
  metrics_level_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get());
  if (from._internal_has_metrics_level()) {
    metrics_level_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get(), from.metrics_level_);
  }
  metrics_namespace_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get());
  if (from._internal_has_metrics_namespace()) {
    metrics_namespace_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get(), from.metrics_namespace_);
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_region()) {
    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  proxy_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proxy_host()) {
    proxy_host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_host_);
  }
  proxy_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proxy_user_name()) {
    proxy_user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_user_name_);
  }
  proxy_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proxy_password()) {
    proxy_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_password_);
  }
  ::memcpy(&enable_core_dumps_, &from.enable_core_dumps_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxy_port_) -
    reinterpret_cast<char*>(&enable_core_dumps_)) + sizeof(proxy_port_));
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Configuration)
}

void Configuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Configuration_config_2eproto.base);
  cloudwatch_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kinesis_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_level_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get());
  metrics_granularity_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get());
  metrics_level_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get());
  metrics_namespace_.UnsafeSetDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_core_dumps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_config_) -
      reinterpret_cast<char*>(&enable_core_dumps_)) + sizeof(thread_config_));
  aggregation_max_count_ = PROTOBUF_ULONGLONG(4294967295);
  aggregation_max_size_ = PROTOBUF_ULONGLONG(51200);
  cloudwatch_port_ = PROTOBUF_ULONGLONG(443);
  collection_max_count_ = PROTOBUF_ULONGLONG(500);
  collection_max_size_ = PROTOBUF_ULONGLONG(5242880);
  connect_timeout_ = PROTOBUF_ULONGLONG(6000);
  kinesis_port_ = PROTOBUF_ULONGLONG(443);
  max_connections_ = PROTOBUF_ULONGLONG(24);
  metrics_upload_delay_ = PROTOBUF_ULONGLONG(60000);
  min_connections_ = PROTOBUF_ULONGLONG(1);
  aggregation_enabled_ = true;
  verify_certificate_ = true;
  thread_pool_size_ = 64u;
  rate_limit_ = PROTOBUF_ULONGLONG(150);
  record_max_buffered_time_ = PROTOBUF_ULONGLONG(100);
  record_ttl_ = PROTOBUF_ULONGLONG(30000);
  request_timeout_ = PROTOBUF_ULONGLONG(6000);
  proxy_port_ = PROTOBUF_ULONGLONG(443);
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
  cloudwatch_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kinesis_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_level_.DestroyNoArena(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get());
  metrics_granularity_.DestroyNoArena(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get());
  metrics_level_.DestroyNoArena(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get());
  metrics_namespace_.DestroyNoArena(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Configuration& Configuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Configuration_config_2eproto.base);
  return *internal_default_instance();
}


void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:aws.kinesis.protobuf.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_metric_dims_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cloudwatch_endpoint_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      kinesis_endpoint_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      log_level_.UnsafeMutablePointer()->assign(*&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      metrics_granularity_.UnsafeMutablePointer()->assign(*&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      metrics_level_.UnsafeMutablePointer()->assign(*&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      metrics_namespace_.UnsafeMutablePointer()->assign(*&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      region_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      proxy_host_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      proxy_user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      proxy_password_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&enable_core_dumps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thread_config_) -
        reinterpret_cast<char*>(&enable_core_dumps_)) + sizeof(thread_config_));
    aggregation_max_count_ = PROTOBUF_ULONGLONG(4294967295);
    aggregation_max_size_ = PROTOBUF_ULONGLONG(51200);
    cloudwatch_port_ = PROTOBUF_ULONGLONG(443);
  }
  if (cached_has_bits & 0x00ff0000u) {
    collection_max_count_ = PROTOBUF_ULONGLONG(500);
    collection_max_size_ = PROTOBUF_ULONGLONG(5242880);
    connect_timeout_ = PROTOBUF_ULONGLONG(6000);
    kinesis_port_ = PROTOBUF_ULONGLONG(443);
    max_connections_ = PROTOBUF_ULONGLONG(24);
    metrics_upload_delay_ = PROTOBUF_ULONGLONG(60000);
    min_connections_ = PROTOBUF_ULONGLONG(1);
    aggregation_enabled_ = true;
  }
  if (cached_has_bits & 0x7f000000u) {
    verify_certificate_ = true;
    thread_pool_size_ = 64u;
    rate_limit_ = PROTOBUF_ULONGLONG(150);
    record_max_buffered_time_ = PROTOBUF_ULONGLONG(100);
    record_ttl_ = PROTOBUF_ULONGLONG(30000);
    request_timeout_ = PROTOBUF_ULONGLONG(6000);
    proxy_port_ = PROTOBUF_ULONGLONG(443);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool aggregation_enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_aggregation_enabled(&has_bits);
          aggregation_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 aggregation_max_count = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_aggregation_max_count(&has_bits);
          aggregation_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 aggregation_max_size = 3 [default = 51200];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_aggregation_max_size(&has_bits);
          aggregation_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cloudwatch_endpoint = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cloudwatch_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.cloudwatch_endpoint");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 cloudwatch_port = 5 [default = 443];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cloudwatch_port(&has_bits);
          cloudwatch_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 collection_max_count = 6 [default = 500];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_collection_max_count(&has_bits);
          collection_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 collection_max_size = 7 [default = 5242880];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_collection_max_size(&has_bits);
          collection_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 connect_timeout = 8 [default = 6000];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_connect_timeout(&has_bits);
          connect_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_core_dumps = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enable_core_dumps(&has_bits);
          enable_core_dumps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fail_if_throttled = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fail_if_throttled(&has_bits);
          fail_if_throttled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string kinesis_endpoint = 11 [default = ""];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_kinesis_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.kinesis_endpoint");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 kinesis_port = 12 [default = 443];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_kinesis_port(&has_bits);
          kinesis_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string log_level = 13 [default = "info"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_log_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.log_level");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_connections = 14 [default = 24];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_connections(&has_bits);
          max_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string metrics_granularity = 15 [default = "shard"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_metrics_granularity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.metrics_granularity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string metrics_level = 16 [default = "detailed"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_metrics_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.metrics_level");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_metrics_namespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.metrics_namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 metrics_upload_delay = 18 [default = 60000];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_metrics_upload_delay(&has_bits);
          metrics_upload_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 min_connections = 19 [default = 1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_min_connections(&has_bits);
          min_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rate_limit = 20 [default = 150];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rate_limit(&has_bits);
          rate_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 record_max_buffered_time = 21 [default = 100];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_record_max_buffered_time(&has_bits);
          record_max_buffered_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 record_ttl = 22 [default = 30000];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_record_ttl(&has_bits);
          record_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string region = 23 [default = ""];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.region");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 request_timeout = 24 [default = 6000];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_request_timeout(&has_bits);
          request_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verify_certificate = 25 [default = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_verify_certificate(&has_bits);
          verify_certificate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proxy_host = 26 [default = ""];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_proxy_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.proxy_host");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 proxy_port = 27 [default = 443];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_proxy_port(&has_bits);
          proxy_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proxy_user_name = 28 [default = ""];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_proxy_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.proxy_user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proxy_password = 29 [default = ""];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_proxy_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "aws.kinesis.protobuf.Configuration.proxy_password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 30 [default = PER_REQUEST];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aws::kinesis::protobuf::Configuration_ThreadConfig_IsValid(val))) {
            _internal_set_thread_config(static_cast<::aws::kinesis::protobuf::Configuration_ThreadConfig>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 thread_pool_size = 31 [default = 64];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_thread_pool_size(&has_bits);
          thread_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_metric_dims(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1026>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool aggregation_enabled = 1 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_aggregation_enabled(), target);
  }

  // optional uint64 aggregation_max_count = 2 [default = 4294967295];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_aggregation_max_count(), target);
  }

  // optional uint64 aggregation_max_size = 3 [default = 51200];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_aggregation_max_size(), target);
  }

  // optional string cloudwatch_endpoint = 4 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cloudwatch_endpoint().data(), static_cast<int>(this->_internal_cloudwatch_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.cloudwatch_endpoint");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cloudwatch_endpoint(), target);
  }

  // optional uint64 cloudwatch_port = 5 [default = 443];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_cloudwatch_port(), target);
  }

  // optional uint64 collection_max_count = 6 [default = 500];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_collection_max_count(), target);
  }

  // optional uint64 collection_max_size = 7 [default = 5242880];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_collection_max_size(), target);
  }

  // optional uint64 connect_timeout = 8 [default = 6000];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_connect_timeout(), target);
  }

  // optional bool enable_core_dumps = 9 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_core_dumps(), target);
  }

  // optional bool fail_if_throttled = 10 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_fail_if_throttled(), target);
  }

  // optional string kinesis_endpoint = 11 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_kinesis_endpoint().data(), static_cast<int>(this->_internal_kinesis_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.kinesis_endpoint");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_kinesis_endpoint(), target);
  }

  // optional uint64 kinesis_port = 12 [default = 443];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_kinesis_port(), target);
  }

  // optional string log_level = 13 [default = "info"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_log_level().data(), static_cast<int>(this->_internal_log_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.log_level");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_log_level(), target);
  }

  // optional uint64 max_connections = 14 [default = 24];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_max_connections(), target);
  }

  // optional string metrics_granularity = 15 [default = "shard"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metrics_granularity().data(), static_cast<int>(this->_internal_metrics_granularity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.metrics_granularity");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_metrics_granularity(), target);
  }

  // optional string metrics_level = 16 [default = "detailed"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metrics_level().data(), static_cast<int>(this->_internal_metrics_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.metrics_level");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_metrics_level(), target);
  }

  // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metrics_namespace().data(), static_cast<int>(this->_internal_metrics_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.metrics_namespace");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_metrics_namespace(), target);
  }

  // optional uint64 metrics_upload_delay = 18 [default = 60000];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_metrics_upload_delay(), target);
  }

  // optional uint64 min_connections = 19 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_min_connections(), target);
  }

  // optional uint64 rate_limit = 20 [default = 150];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_rate_limit(), target);
  }

  // optional uint64 record_max_buffered_time = 21 [default = 100];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_record_max_buffered_time(), target);
  }

  // optional uint64 record_ttl = 22 [default = 30000];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_record_ttl(), target);
  }

  // optional string region = 23 [default = ""];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.region");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_region(), target);
  }

  // optional uint64 request_timeout = 24 [default = 6000];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_request_timeout(), target);
  }

  // optional bool verify_certificate = 25 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_verify_certificate(), target);
  }

  // optional string proxy_host = 26 [default = ""];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proxy_host().data(), static_cast<int>(this->_internal_proxy_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.proxy_host");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_proxy_host(), target);
  }

  // optional uint64 proxy_port = 27 [default = 443];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_proxy_port(), target);
  }

  // optional string proxy_user_name = 28 [default = ""];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proxy_user_name().data(), static_cast<int>(this->_internal_proxy_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.proxy_user_name");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_proxy_user_name(), target);
  }

  // optional string proxy_password = 29 [default = ""];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proxy_password().data(), static_cast<int>(this->_internal_proxy_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aws.kinesis.protobuf.Configuration.proxy_password");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_proxy_password(), target);
  }

  // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 30 [default = PER_REQUEST];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_thread_config(), target);
  }

  // optional uint32 thread_pool_size = 31 [default = 64];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_thread_pool_size(), target);
  }

  // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_metric_dims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, this->_internal_additional_metric_dims(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aws.kinesis.protobuf.Configuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aws.kinesis.protobuf.AdditionalDimension additional_metric_dims = 128;
  total_size += 2UL * this->_internal_additional_metric_dims_size();
  for (const auto& msg : this->additional_metric_dims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cloudwatch_endpoint = 4 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cloudwatch_endpoint());
    }

    // optional string kinesis_endpoint = 11 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_kinesis_endpoint());
    }

    // optional string log_level = 13 [default = "info"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_level());
    }

    // optional string metrics_granularity = 15 [default = "shard"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metrics_granularity());
    }

    // optional string metrics_level = 16 [default = "detailed"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metrics_level());
    }

    // optional string metrics_namespace = 17 [default = "KinesisProducerLibrary"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metrics_namespace());
    }

    // optional string region = 23 [default = ""];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region());
    }

    // optional string proxy_host = 26 [default = ""];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proxy_host());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string proxy_user_name = 28 [default = ""];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proxy_user_name());
    }

    // optional string proxy_password = 29 [default = ""];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proxy_password());
    }

    // optional bool enable_core_dumps = 9 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool fail_if_throttled = 10 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .aws.kinesis.protobuf.Configuration.ThreadConfig thread_config = 30 [default = PER_REQUEST];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_thread_config());
    }

    // optional uint64 aggregation_max_count = 2 [default = 4294967295];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_aggregation_max_count());
    }

    // optional uint64 aggregation_max_size = 3 [default = 51200];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_aggregation_max_size());
    }

    // optional uint64 cloudwatch_port = 5 [default = 443];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_cloudwatch_port());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 collection_max_count = 6 [default = 500];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_collection_max_count());
    }

    // optional uint64 collection_max_size = 7 [default = 5242880];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_collection_max_size());
    }

    // optional uint64 connect_timeout = 8 [default = 6000];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_connect_timeout());
    }

    // optional uint64 kinesis_port = 12 [default = 443];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_kinesis_port());
    }

    // optional uint64 max_connections = 14 [default = 24];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_connections());
    }

    // optional uint64 metrics_upload_delay = 18 [default = 60000];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_metrics_upload_delay());
    }

    // optional uint64 min_connections = 19 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_min_connections());
    }

    // optional bool aggregation_enabled = 1 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool verify_certificate = 25 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 thread_pool_size = 31 [default = 64];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thread_pool_size());
    }

    // optional uint64 rate_limit = 20 [default = 150];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rate_limit());
    }

    // optional uint64 record_max_buffered_time = 21 [default = 100];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_record_max_buffered_time());
    }

    // optional uint64 record_ttl = 22 [default = 30000];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_record_ttl());
    }

    // optional uint64 request_timeout = 24 [default = 6000];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_request_timeout());
    }

    // optional uint64 proxy_port = 27 [default = 443];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_proxy_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aws.kinesis.protobuf.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const Configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aws.kinesis.protobuf.Configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aws.kinesis.protobuf.Configuration)
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aws.kinesis.protobuf.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_metric_dims_.MergeFrom(from.additional_metric_dims_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cloudwatch_endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cloudwatch_endpoint_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      kinesis_endpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kinesis_endpoint_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      log_level_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get(), from.log_level_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      metrics_granularity_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get(), from.metrics_granularity_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      metrics_level_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get(), from.metrics_level_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      metrics_namespace_.AssignWithDefault(&::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get(), from.metrics_namespace_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      proxy_host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_host_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      proxy_user_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_user_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      proxy_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proxy_password_);
    }
    if (cached_has_bits & 0x00000400u) {
      enable_core_dumps_ = from.enable_core_dumps_;
    }
    if (cached_has_bits & 0x00000800u) {
      fail_if_throttled_ = from.fail_if_throttled_;
    }
    if (cached_has_bits & 0x00001000u) {
      thread_config_ = from.thread_config_;
    }
    if (cached_has_bits & 0x00002000u) {
      aggregation_max_count_ = from.aggregation_max_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      aggregation_max_size_ = from.aggregation_max_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      cloudwatch_port_ = from.cloudwatch_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      collection_max_count_ = from.collection_max_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      collection_max_size_ = from.collection_max_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      connect_timeout_ = from.connect_timeout_;
    }
    if (cached_has_bits & 0x00080000u) {
      kinesis_port_ = from.kinesis_port_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_connections_ = from.max_connections_;
    }
    if (cached_has_bits & 0x00200000u) {
      metrics_upload_delay_ = from.metrics_upload_delay_;
    }
    if (cached_has_bits & 0x00400000u) {
      min_connections_ = from.min_connections_;
    }
    if (cached_has_bits & 0x00800000u) {
      aggregation_enabled_ = from.aggregation_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      verify_certificate_ = from.verify_certificate_;
    }
    if (cached_has_bits & 0x02000000u) {
      thread_pool_size_ = from.thread_pool_size_;
    }
    if (cached_has_bits & 0x04000000u) {
      rate_limit_ = from.rate_limit_;
    }
    if (cached_has_bits & 0x08000000u) {
      record_max_buffered_time_ = from.record_max_buffered_time_;
    }
    if (cached_has_bits & 0x10000000u) {
      record_ttl_ = from.record_ttl_;
    }
    if (cached_has_bits & 0x20000000u) {
      request_timeout_ = from.request_timeout_;
    }
    if (cached_has_bits & 0x40000000u) {
      proxy_port_ = from.proxy_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aws.kinesis.protobuf.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aws.kinesis.protobuf.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(additional_metric_dims_)) return false;
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_metric_dims_.InternalSwap(&other->additional_metric_dims_);
  cloudwatch_endpoint_.Swap(&other->cloudwatch_endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kinesis_endpoint_.Swap(&other->kinesis_endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_level_.Swap(&other->log_level_, &::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_log_level_.get(),
    GetArenaNoVirtual());
  metrics_granularity_.Swap(&other->metrics_granularity_, &::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_granularity_.get(),
    GetArenaNoVirtual());
  metrics_level_.Swap(&other->metrics_level_, &::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_level_.get(),
    GetArenaNoVirtual());
  metrics_namespace_.Swap(&other->metrics_namespace_, &::aws::kinesis::protobuf::Configuration::_i_give_permission_to_break_this_code_default_metrics_namespace_.get(),
    GetArenaNoVirtual());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_host_.Swap(&other->proxy_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_user_name_.Swap(&other->proxy_user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_password_.Swap(&other->proxy_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enable_core_dumps_, other->enable_core_dumps_);
  swap(fail_if_throttled_, other->fail_if_throttled_);
  swap(thread_config_, other->thread_config_);
  swap(aggregation_max_count_, other->aggregation_max_count_);
  swap(aggregation_max_size_, other->aggregation_max_size_);
  swap(cloudwatch_port_, other->cloudwatch_port_);
  swap(collection_max_count_, other->collection_max_count_);
  swap(collection_max_size_, other->collection_max_size_);
  swap(connect_timeout_, other->connect_timeout_);
  swap(kinesis_port_, other->kinesis_port_);
  swap(max_connections_, other->max_connections_);
  swap(metrics_upload_delay_, other->metrics_upload_delay_);
  swap(min_connections_, other->min_connections_);
  swap(aggregation_enabled_, other->aggregation_enabled_);
  swap(verify_certificate_, other->verify_certificate_);
  swap(thread_pool_size_, other->thread_pool_size_);
  swap(rate_limit_, other->rate_limit_);
  swap(record_max_buffered_time_, other->record_max_buffered_time_);
  swap(record_ttl_, other->record_ttl_);
  swap(request_timeout_, other->request_timeout_);
  swap(proxy_port_, other->proxy_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aws::kinesis::protobuf::AdditionalDimension* Arena::CreateMaybeMessage< ::aws::kinesis::protobuf::AdditionalDimension >(Arena* arena) {
  return Arena::CreateInternal< ::aws::kinesis::protobuf::AdditionalDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::aws::kinesis::protobuf::Configuration* Arena::CreateMaybeMessage< ::aws::kinesis::protobuf::Configuration >(Arena* arena) {
  return Arena::CreateInternal< ::aws::kinesis::protobuf::Configuration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
