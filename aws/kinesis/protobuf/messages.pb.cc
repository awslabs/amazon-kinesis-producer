// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aws {
namespace kinesis {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* AggregatedRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregatedRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
struct MessageOneofInstance {
  const ::aws::kinesis::protobuf::PutRecord* put_record_;
  const ::aws::kinesis::protobuf::Flush* flush_;
  const ::aws::kinesis::protobuf::PutRecordResult* put_record_result_;
  const ::aws::kinesis::protobuf::Configuration* configuration_;
  const ::aws::kinesis::protobuf::MetricsRequest* metrics_request_;
  const ::aws::kinesis::protobuf::MetricsResponse* metrics_response_;
  const ::aws::kinesis::protobuf::SetCredentials* set_credentials_;
}* Message_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* PutRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Flush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Flush_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attempt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attempt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRecordResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRecordResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Credentials_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Credentials_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCredentials_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCredentials_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dimension_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dimension_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  Tag_descriptor_ = file->message_type(0);
  static const int Tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, value_),
  };
  Tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tag_descriptor_,
      Tag::default_instance_,
      Tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tag));
  Record_descriptor_ = file->message_type(1);
  static const int Record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, partition_key_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, explicit_hash_key_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, tags_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  AggregatedRecord_descriptor_ = file->message_type(2);
  static const int AggregatedRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatedRecord, partition_key_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatedRecord, explicit_hash_key_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatedRecord, records_),
  };
  AggregatedRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregatedRecord_descriptor_,
      AggregatedRecord::default_instance_,
      AggregatedRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatedRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatedRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregatedRecord));
  Message_descriptor_ = file->message_type(3);
  static const int Message_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, source_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, put_record_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, flush_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, put_record_result_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, configuration_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, metrics_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, metrics_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Message_default_oneof_instance_, set_credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, actual_message_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      Message_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  PutRecord_descriptor_ = file->message_type(4);
  static const int PutRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecord, stream_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecord, partition_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecord, explicit_hash_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecord, data_),
  };
  PutRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutRecord_descriptor_,
      PutRecord::default_instance_,
      PutRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutRecord));
  Flush_descriptor_ = file->message_type(5);
  static const int Flush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, stream_name_),
  };
  Flush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Flush_descriptor_,
      Flush::default_instance_,
      Flush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Flush));
  Attempt_descriptor_ = file->message_type(6);
  static const int Attempt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, error_message_),
  };
  Attempt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attempt_descriptor_,
      Attempt::default_instance_,
      Attempt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attempt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attempt));
  PutRecordResult_descriptor_ = file->message_type(7);
  static const int PutRecordResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecordResult, attempts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecordResult, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecordResult, shard_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecordResult, sequence_number_),
  };
  PutRecordResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutRecordResult_descriptor_,
      PutRecordResult::default_instance_,
      PutRecordResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecordResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRecordResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutRecordResult));
  Credentials_descriptor_ = file->message_type(8);
  static const int Credentials_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, akid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, secret_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, token_),
  };
  Credentials_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Credentials_descriptor_,
      Credentials::default_instance_,
      Credentials_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Credentials));
  SetCredentials_descriptor_ = file->message_type(9);
  static const int SetCredentials_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCredentials, for_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCredentials, credentials_),
  };
  SetCredentials_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCredentials_descriptor_,
      SetCredentials::default_instance_,
      SetCredentials_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCredentials, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCredentials, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCredentials));
  Dimension_descriptor_ = file->message_type(10);
  static const int Dimension_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension, value_),
  };
  Dimension_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dimension_descriptor_,
      Dimension::default_instance_,
      Dimension_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dimension, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dimension));
  Stats_descriptor_ = file->message_type(11);
  static const int Stats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, max_),
  };
  Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stats));
  Metric_descriptor_ = file->message_type(12);
  static const int Metric_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, seconds_),
  };
  Metric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metric_descriptor_,
      Metric::default_instance_,
      Metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metric));
  MetricsRequest_descriptor_ = file->message_type(13);
  static const int MetricsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsRequest, seconds_),
  };
  MetricsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricsRequest_descriptor_,
      MetricsRequest::default_instance_,
      MetricsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricsRequest));
  MetricsResponse_descriptor_ = file->message_type(14);
  static const int MetricsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResponse, metrics_),
  };
  MetricsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricsResponse_descriptor_,
      MetricsResponse::default_instance_,
      MetricsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricsResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tag_descriptor_, &Tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregatedRecord_descriptor_, &AggregatedRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutRecord_descriptor_, &PutRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Flush_descriptor_, &Flush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attempt_descriptor_, &Attempt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutRecordResult_descriptor_, &PutRecordResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Credentials_descriptor_, &Credentials::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCredentials_descriptor_, &SetCredentials::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dimension_descriptor_, &Dimension::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stats_descriptor_, &Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metric_descriptor_, &Metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricsRequest_descriptor_, &MetricsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricsResponse_descriptor_, &MetricsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete Tag::default_instance_;
  delete Tag_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete AggregatedRecord::default_instance_;
  delete AggregatedRecord_reflection_;
  delete Message::default_instance_;
  delete Message_default_oneof_instance_;
  delete Message_reflection_;
  delete PutRecord::default_instance_;
  delete PutRecord_reflection_;
  delete Flush::default_instance_;
  delete Flush_reflection_;
  delete Attempt::default_instance_;
  delete Attempt_reflection_;
  delete PutRecordResult::default_instance_;
  delete PutRecordResult_reflection_;
  delete Credentials::default_instance_;
  delete Credentials_reflection_;
  delete SetCredentials::default_instance_;
  delete SetCredentials_reflection_;
  delete Dimension::default_instance_;
  delete Dimension_reflection_;
  delete Stats::default_instance_;
  delete Stats_reflection_;
  delete Metric::default_instance_;
  delete Metric_reflection_;
  delete MetricsRequest::default_instance_;
  delete MetricsRequest_reflection_;
  delete MetricsResponse::default_instance_;
  delete MetricsResponse_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::aws::kinesis::protobuf::protobuf_AddDesc_config_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\024aws.kinesis.protobuf\032\014"
    "config.proto\"!\n\003Tag\022\013\n\003key\030\001 \002(\t\022\r\n\005valu"
    "e\030\002 \001(\t\"}\n\006Record\022\033\n\023partition_key_index"
    "\030\001 \002(\004\022\037\n\027explicit_hash_key_index\030\002 \001(\004\022"
    "\014\n\004data\030\003 \002(\014\022\'\n\004tags\030\004 \003(\0132\031.aws.kinesi"
    "s.protobuf.Tag\"\177\n\020AggregatedRecord\022\033\n\023pa"
    "rtition_key_table\030\001 \003(\t\022\037\n\027explicit_hash"
    "_key_table\030\002 \003(\t\022-\n\007records\030\003 \003(\0132\034.aws."
    "kinesis.protobuf.Record\"\346\003\n\007Message\022\n\n\002i"
    "d\030\001 \002(\004\022\021\n\tsource_id\030\002 \001(\004\0225\n\nput_record"
    "\030\003 \001(\0132\037.aws.kinesis.protobuf.PutRecordH"
    "\000\022,\n\005flush\030\004 \001(\0132\033.aws.kinesis.protobuf."
    "FlushH\000\022B\n\021put_record_result\030\005 \001(\0132%.aws"
    ".kinesis.protobuf.PutRecordResultH\000\022<\n\rc"
    "onfiguration\030\006 \001(\0132#.aws.kinesis.protobu"
    "f.ConfigurationH\000\022\?\n\017metrics_request\030\007 \001"
    "(\0132$.aws.kinesis.protobuf.MetricsRequest"
    "H\000\022A\n\020metrics_response\030\010 \001(\0132%.aws.kines"
    "is.protobuf.MetricsResponseH\000\022\?\n\017set_cre"
    "dentials\030\t \001(\0132$.aws.kinesis.protobuf.Se"
    "tCredentialsH\000B\020\n\016actual_message\"`\n\tPutR"
    "ecord\022\023\n\013stream_name\030\001 \002(\t\022\025\n\rpartition_"
    "key\030\002 \002(\t\022\031\n\021explicit_hash_key\030\003 \001(\t\022\014\n\004"
    "data\030\004 \002(\014\"\034\n\005Flush\022\023\n\013stream_name\030\001 \001(\t"
    "\"f\n\007Attempt\022\r\n\005delay\030\001 \002(\r\022\020\n\010duration\030\002"
    " \002(\r\022\017\n\007success\030\003 \002(\010\022\022\n\nerror_code\030\004 \001("
    "\t\022\025\n\rerror_message\030\005 \001(\t\"~\n\017PutRecordRes"
    "ult\022/\n\010attempts\030\001 \003(\0132\035.aws.kinesis.prot"
    "obuf.Attempt\022\017\n\007success\030\002 \002(\010\022\020\n\010shard_i"
    "d\030\003 \001(\t\022\027\n\017sequence_number\030\004 \001(\t\">\n\013Cred"
    "entials\022\014\n\004akid\030\001 \002(\t\022\022\n\nsecret_key\030\002 \002("
    "\t\022\r\n\005token\030\003 \001(\t\"]\n\016SetCredentials\022\023\n\013fo"
    "r_metrics\030\001 \001(\010\0226\n\013credentials\030\002 \002(\0132!.a"
    "ws.kinesis.protobuf.Credentials\"\'\n\tDimen"
    "sion\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"K\n\005Stat"
    "s\022\r\n\005count\030\001 \002(\001\022\013\n\003sum\030\002 \002(\001\022\014\n\004mean\030\003 "
    "\002(\001\022\013\n\003min\030\004 \002(\001\022\013\n\003max\030\005 \002(\001\"\210\001\n\006Metric"
    "\022\014\n\004name\030\001 \002(\t\0223\n\ndimensions\030\002 \003(\0132\037.aws"
    ".kinesis.protobuf.Dimension\022*\n\005stats\030\003 \002"
    "(\0132\033.aws.kinesis.protobuf.Stats\022\017\n\007secon"
    "ds\030\004 \002(\004\"/\n\016MetricsRequest\022\014\n\004name\030\001 \001(\t"
    "\022\017\n\007seconds\030\002 \001(\004\"@\n\017MetricsResponse\022-\n\007"
    "metrics\030\001 \003(\0132\034.aws.kinesis.protobuf.Met"
    "ricB2\n0com.amazonaws.services.kinesis.pr"
    "oducer.protobuf", 1775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  Tag::default_instance_ = new Tag();
  Record::default_instance_ = new Record();
  AggregatedRecord::default_instance_ = new AggregatedRecord();
  Message::default_instance_ = new Message();
  Message_default_oneof_instance_ = new MessageOneofInstance;
  PutRecord::default_instance_ = new PutRecord();
  Flush::default_instance_ = new Flush();
  Attempt::default_instance_ = new Attempt();
  PutRecordResult::default_instance_ = new PutRecordResult();
  Credentials::default_instance_ = new Credentials();
  SetCredentials::default_instance_ = new SetCredentials();
  Dimension::default_instance_ = new Dimension();
  Stats::default_instance_ = new Stats();
  Metric::default_instance_ = new Metric();
  MetricsRequest::default_instance_ = new MetricsRequest();
  MetricsResponse::default_instance_ = new MetricsResponse();
  Tag::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  AggregatedRecord::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  PutRecord::default_instance_->InitAsDefaultInstance();
  Flush::default_instance_->InitAsDefaultInstance();
  Attempt::default_instance_->InitAsDefaultInstance();
  PutRecordResult::default_instance_->InitAsDefaultInstance();
  Credentials::default_instance_->InitAsDefaultInstance();
  SetCredentials::default_instance_->InitAsDefaultInstance();
  Dimension::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  Metric::default_instance_->InitAsDefaultInstance();
  MetricsRequest::default_instance_->InitAsDefaultInstance();
  MetricsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Tag::kKeyFieldNumber;
const int Tag::kValueFieldNumber;
#endif  // !_MSC_VER

Tag::Tag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Tag)
}

void Tag::InitAsDefaultInstance() {
}

Tag::Tag(const Tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Tag)
}

void Tag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tag_descriptor_;
}

const Tag& Tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Tag* Tag::default_instance_ = NULL;

Tag* Tag::New() const {
  return new Tag;
}

void Tag::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Tag)
  return false;
#undef DO_
}

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Tag)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Tag)
}

::google::protobuf::uint8* Tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Tag)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Tag)
  return target;
}

int Tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tag::Swap(Tag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tag_descriptor_;
  metadata.reflection = Tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Record::kPartitionKeyIndexFieldNumber;
const int Record::kExplicitHashKeyIndexFieldNumber;
const int Record::kDataFieldNumber;
const int Record::kTagsFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partition_key_index_ = GOOGLE_ULONGLONG(0);
  explicit_hash_key_index_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Record*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(partition_key_index_, explicit_hash_key_index_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 partition_key_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partition_key_index_)));
          set_has_partition_key_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_explicit_hash_key_index;
        break;
      }

      // optional uint64 explicit_hash_key_index = 2;
      case 2: {
        if (tag == 16) {
         parse_explicit_hash_key_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &explicit_hash_key_index_)));
          set_has_explicit_hash_key_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated .aws.kinesis.protobuf.Tag tags = 4;
      case 4: {
        if (tag == 34) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Record)
  // required uint64 partition_key_index = 1;
  if (has_partition_key_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->partition_key_index(), output);
  }

  // optional uint64 explicit_hash_key_index = 2;
  if (has_explicit_hash_key_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->explicit_hash_key_index(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // repeated .aws.kinesis.protobuf.Tag tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Record)
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Record)
  // required uint64 partition_key_index = 1;
  if (has_partition_key_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->partition_key_index(), target);
  }

  // optional uint64 explicit_hash_key_index = 2;
  if (has_explicit_hash_key_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->explicit_hash_key_index(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // repeated .aws.kinesis.protobuf.Tag tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Record)
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 partition_key_index = 1;
    if (has_partition_key_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->partition_key_index());
    }

    // optional uint64 explicit_hash_key_index = 2;
    if (has_explicit_hash_key_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->explicit_hash_key_index());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated .aws.kinesis.protobuf.Tag tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_key_index()) {
      set_partition_key_index(from.partition_key_index());
    }
    if (from.has_explicit_hash_key_index()) {
      set_explicit_hash_key_index(from.explicit_hash_key_index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->tags())) return false;
  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(partition_key_index_, other->partition_key_index_);
    std::swap(explicit_hash_key_index_, other->explicit_hash_key_index_);
    std::swap(data_, other->data_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AggregatedRecord::kPartitionKeyTableFieldNumber;
const int AggregatedRecord::kExplicitHashKeyTableFieldNumber;
const int AggregatedRecord::kRecordsFieldNumber;
#endif  // !_MSC_VER

AggregatedRecord::AggregatedRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.AggregatedRecord)
}

void AggregatedRecord::InitAsDefaultInstance() {
}

AggregatedRecord::AggregatedRecord(const AggregatedRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.AggregatedRecord)
}

void AggregatedRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatedRecord::~AggregatedRecord() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.AggregatedRecord)
  SharedDtor();
}

void AggregatedRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AggregatedRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregatedRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregatedRecord_descriptor_;
}

const AggregatedRecord& AggregatedRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

AggregatedRecord* AggregatedRecord::default_instance_ = NULL;

AggregatedRecord* AggregatedRecord::New() const {
  return new AggregatedRecord;
}

void AggregatedRecord::Clear() {
  partition_key_table_.Clear();
  explicit_hash_key_table_.Clear();
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregatedRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.AggregatedRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string partition_key_table = 1;
      case 1: {
        if (tag == 10) {
         parse_partition_key_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_partition_key_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partition_key_table(this->partition_key_table_size() - 1).data(),
            this->partition_key_table(this->partition_key_table_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "partition_key_table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_partition_key_table;
        if (input->ExpectTag(18)) goto parse_explicit_hash_key_table;
        break;
      }

      // repeated string explicit_hash_key_table = 2;
      case 2: {
        if (tag == 18) {
         parse_explicit_hash_key_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_explicit_hash_key_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explicit_hash_key_table(this->explicit_hash_key_table_size() - 1).data(),
            this->explicit_hash_key_table(this->explicit_hash_key_table_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explicit_hash_key_table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_explicit_hash_key_table;
        if (input->ExpectTag(26)) goto parse_records;
        break;
      }

      // repeated .aws.kinesis.protobuf.Record records = 3;
      case 3: {
        if (tag == 26) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.AggregatedRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.AggregatedRecord)
  return false;
#undef DO_
}

void AggregatedRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.AggregatedRecord)
  // repeated string partition_key_table = 1;
  for (int i = 0; i < this->partition_key_table_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->partition_key_table(i).data(), this->partition_key_table(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "partition_key_table");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->partition_key_table(i), output);
  }

  // repeated string explicit_hash_key_table = 2;
  for (int i = 0; i < this->explicit_hash_key_table_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->explicit_hash_key_table(i).data(), this->explicit_hash_key_table(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "explicit_hash_key_table");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->explicit_hash_key_table(i), output);
  }

  // repeated .aws.kinesis.protobuf.Record records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.AggregatedRecord)
}

::google::protobuf::uint8* AggregatedRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.AggregatedRecord)
  // repeated string partition_key_table = 1;
  for (int i = 0; i < this->partition_key_table_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partition_key_table(i).data(), this->partition_key_table(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partition_key_table");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->partition_key_table(i), target);
  }

  // repeated string explicit_hash_key_table = 2;
  for (int i = 0; i < this->explicit_hash_key_table_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explicit_hash_key_table(i).data(), this->explicit_hash_key_table(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explicit_hash_key_table");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->explicit_hash_key_table(i), target);
  }

  // repeated .aws.kinesis.protobuf.Record records = 3;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.AggregatedRecord)
  return target;
}

int AggregatedRecord::ByteSize() const {
  int total_size = 0;

  // repeated string partition_key_table = 1;
  total_size += 1 * this->partition_key_table_size();
  for (int i = 0; i < this->partition_key_table_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->partition_key_table(i));
  }

  // repeated string explicit_hash_key_table = 2;
  total_size += 1 * this->explicit_hash_key_table_size();
  for (int i = 0; i < this->explicit_hash_key_table_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->explicit_hash_key_table(i));
  }

  // repeated .aws.kinesis.protobuf.Record records = 3;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatedRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregatedRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregatedRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregatedRecord::MergeFrom(const AggregatedRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  partition_key_table_.MergeFrom(from.partition_key_table_);
  explicit_hash_key_table_.MergeFrom(from.explicit_hash_key_table_);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregatedRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatedRecord::CopyFrom(const AggregatedRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void AggregatedRecord::Swap(AggregatedRecord* other) {
  if (other != this) {
    partition_key_table_.Swap(&other->partition_key_table_);
    explicit_hash_key_table_.Swap(&other->explicit_hash_key_table_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregatedRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregatedRecord_descriptor_;
  metadata.reflection = AggregatedRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kSourceIdFieldNumber;
const int Message::kPutRecordFieldNumber;
const int Message::kFlushFieldNumber;
const int Message::kPutRecordResultFieldNumber;
const int Message::kConfigurationFieldNumber;
const int Message::kMetricsRequestFieldNumber;
const int Message::kMetricsResponseFieldNumber;
const int Message::kSetCredentialsFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Message)
}

void Message::InitAsDefaultInstance() {
  Message_default_oneof_instance_->put_record_ = const_cast< ::aws::kinesis::protobuf::PutRecord*>(&::aws::kinesis::protobuf::PutRecord::default_instance());
  Message_default_oneof_instance_->flush_ = const_cast< ::aws::kinesis::protobuf::Flush*>(&::aws::kinesis::protobuf::Flush::default_instance());
  Message_default_oneof_instance_->put_record_result_ = const_cast< ::aws::kinesis::protobuf::PutRecordResult*>(&::aws::kinesis::protobuf::PutRecordResult::default_instance());
  Message_default_oneof_instance_->configuration_ = const_cast< ::aws::kinesis::protobuf::Configuration*>(&::aws::kinesis::protobuf::Configuration::default_instance());
  Message_default_oneof_instance_->metrics_request_ = const_cast< ::aws::kinesis::protobuf::MetricsRequest*>(&::aws::kinesis::protobuf::MetricsRequest::default_instance());
  Message_default_oneof_instance_->metrics_response_ = const_cast< ::aws::kinesis::protobuf::MetricsResponse*>(&::aws::kinesis::protobuf::MetricsResponse::default_instance());
  Message_default_oneof_instance_->set_credentials_ = const_cast< ::aws::kinesis::protobuf::SetCredentials*>(&::aws::kinesis::protobuf::SetCredentials::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  source_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_actual_message();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_actual_message()) {
    clear_actual_message();
  }
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::clear_actual_message() {
  switch(actual_message_case()) {
    case kPutRecord: {
      delete actual_message_.put_record_;
      break;
    }
    case kFlush: {
      delete actual_message_.flush_;
      break;
    }
    case kPutRecordResult: {
      delete actual_message_.put_record_result_;
      break;
    }
    case kConfiguration: {
      delete actual_message_.configuration_;
      break;
    }
    case kMetricsRequest: {
      delete actual_message_.metrics_request_;
      break;
    }
    case kMetricsResponse: {
      delete actual_message_.metrics_response_;
      break;
    }
    case kSetCredentials: {
      delete actual_message_.set_credentials_;
      break;
    }
    case ACTUAL_MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTUAL_MESSAGE_NOT_SET;
}


void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, source_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_actual_message();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }

      // optional uint64 source_id = 2;
      case 2: {
        if (tag == 16) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_put_record;
        break;
      }

      // optional .aws.kinesis.protobuf.PutRecord put_record = 3;
      case 3: {
        if (tag == 26) {
         parse_put_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_flush;
        break;
      }

      // optional .aws.kinesis.protobuf.Flush flush = 4;
      case 4: {
        if (tag == 34) {
         parse_flush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_put_record_result;
        break;
      }

      // optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
      case 5: {
        if (tag == 42) {
         parse_put_record_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_record_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_configuration;
        break;
      }

      // optional .aws.kinesis.protobuf.Configuration configuration = 6;
      case 6: {
        if (tag == 50) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_metrics_request;
        break;
      }

      // optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
      case 7: {
        if (tag == 58) {
         parse_metrics_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_metrics_response;
        break;
      }

      // optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
      case 8: {
        if (tag == 66) {
         parse_metrics_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_set_credentials;
        break;
      }

      // optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
      case 9: {
        if (tag == 74) {
         parse_set_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_credentials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Message)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->source_id(), output);
  }

  // optional .aws.kinesis.protobuf.PutRecord put_record = 3;
  if (has_put_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->put_record(), output);
  }

  // optional .aws.kinesis.protobuf.Flush flush = 4;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->flush(), output);
  }

  // optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
  if (has_put_record_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->put_record_result(), output);
  }

  // optional .aws.kinesis.protobuf.Configuration configuration = 6;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->configuration(), output);
  }

  // optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
  if (has_metrics_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->metrics_request(), output);
  }

  // optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
  if (has_metrics_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->metrics_response(), output);
  }

  // optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
  if (has_set_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->set_credentials(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Message)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 source_id = 2;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->source_id(), target);
  }

  // optional .aws.kinesis.protobuf.PutRecord put_record = 3;
  if (has_put_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->put_record(), target);
  }

  // optional .aws.kinesis.protobuf.Flush flush = 4;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->flush(), target);
  }

  // optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
  if (has_put_record_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->put_record_result(), target);
  }

  // optional .aws.kinesis.protobuf.Configuration configuration = 6;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->configuration(), target);
  }

  // optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
  if (has_metrics_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->metrics_request(), target);
  }

  // optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
  if (has_metrics_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->metrics_response(), target);
  }

  // optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
  if (has_set_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->set_credentials(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_id());
    }

  }
  switch (actual_message_case()) {
    // optional .aws.kinesis.protobuf.PutRecord put_record = 3;
    case kPutRecord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_record());
      break;
    }
    // optional .aws.kinesis.protobuf.Flush flush = 4;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flush());
      break;
    }
    // optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
    case kPutRecordResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_record_result());
      break;
    }
    // optional .aws.kinesis.protobuf.Configuration configuration = 6;
    case kConfiguration: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
      break;
    }
    // optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
    case kMetricsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics_request());
      break;
    }
    // optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
    case kMetricsResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics_response());
      break;
    }
    // optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
    case kSetCredentials: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_credentials());
      break;
    }
    case ACTUAL_MESSAGE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.actual_message_case()) {
    case kPutRecord: {
      mutable_put_record()->::aws::kinesis::protobuf::PutRecord::MergeFrom(from.put_record());
      break;
    }
    case kFlush: {
      mutable_flush()->::aws::kinesis::protobuf::Flush::MergeFrom(from.flush());
      break;
    }
    case kPutRecordResult: {
      mutable_put_record_result()->::aws::kinesis::protobuf::PutRecordResult::MergeFrom(from.put_record_result());
      break;
    }
    case kConfiguration: {
      mutable_configuration()->::aws::kinesis::protobuf::Configuration::MergeFrom(from.configuration());
      break;
    }
    case kMetricsRequest: {
      mutable_metrics_request()->::aws::kinesis::protobuf::MetricsRequest::MergeFrom(from.metrics_request());
      break;
    }
    case kMetricsResponse: {
      mutable_metrics_response()->::aws::kinesis::protobuf::MetricsResponse::MergeFrom(from.metrics_response());
      break;
    }
    case kSetCredentials: {
      mutable_set_credentials()->::aws::kinesis::protobuf::SetCredentials::MergeFrom(from.set_credentials());
      break;
    }
    case ACTUAL_MESSAGE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_put_record()) {
    if (!this->put_record().IsInitialized()) return false;
  }
  if (has_put_record_result()) {
    if (!this->put_record_result().IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  if (has_metrics_response()) {
    if (!this->metrics_response().IsInitialized()) return false;
  }
  if (has_set_credentials()) {
    if (!this->set_credentials().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(source_id_, other->source_id_);
    std::swap(actual_message_, other->actual_message_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutRecord::kStreamNameFieldNumber;
const int PutRecord::kPartitionKeyFieldNumber;
const int PutRecord::kExplicitHashKeyFieldNumber;
const int PutRecord::kDataFieldNumber;
#endif  // !_MSC_VER

PutRecord::PutRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.PutRecord)
}

void PutRecord::InitAsDefaultInstance() {
}

PutRecord::PutRecord(const PutRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.PutRecord)
}

void PutRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explicit_hash_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutRecord::~PutRecord() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.PutRecord)
  SharedDtor();
}

void PutRecord::SharedDtor() {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (partition_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partition_key_;
  }
  if (explicit_hash_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explicit_hash_key_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PutRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRecord_descriptor_;
}

const PutRecord& PutRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

PutRecord* PutRecord::default_instance_ = NULL;

PutRecord* PutRecord::New() const {
  return new PutRecord;
}

void PutRecord::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_stream_name()) {
      if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stream_name_->clear();
      }
    }
    if (has_partition_key()) {
      if (partition_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        partition_key_->clear();
      }
    }
    if (has_explicit_hash_key()) {
      if (explicit_hash_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        explicit_hash_key_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.PutRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stream_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stream_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partition_key;
        break;
      }

      // required string partition_key = 2;
      case 2: {
        if (tag == 18) {
         parse_partition_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partition_key().data(), this->partition_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "partition_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_explicit_hash_key;
        break;
      }

      // optional string explicit_hash_key = 3;
      case 3: {
        if (tag == 26) {
         parse_explicit_hash_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explicit_hash_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explicit_hash_key().data(), this->explicit_hash_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explicit_hash_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.PutRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.PutRecord)
  return false;
#undef DO_
}

void PutRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.PutRecord)
  // required string stream_name = 1;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_name(), output);
  }

  // required string partition_key = 2;
  if (has_partition_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partition_key().data(), this->partition_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partition_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partition_key(), output);
  }

  // optional string explicit_hash_key = 3;
  if (has_explicit_hash_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explicit_hash_key().data(), this->explicit_hash_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explicit_hash_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->explicit_hash_key(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.PutRecord)
}

::google::protobuf::uint8* PutRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.PutRecord)
  // required string stream_name = 1;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_name(), target);
  }

  // required string partition_key = 2;
  if (has_partition_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partition_key().data(), this->partition_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partition_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partition_key(), target);
  }

  // optional string explicit_hash_key = 3;
  if (has_explicit_hash_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explicit_hash_key().data(), this->explicit_hash_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explicit_hash_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->explicit_hash_key(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.PutRecord)
  return target;
}

int PutRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stream_name = 1;
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

    // required string partition_key = 2;
    if (has_partition_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partition_key());
    }

    // optional string explicit_hash_key = 3;
    if (has_explicit_hash_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explicit_hash_key());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutRecord::MergeFrom(const PutRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
    if (from.has_partition_key()) {
      set_partition_key(from.partition_key());
    }
    if (from.has_explicit_hash_key()) {
      set_explicit_hash_key(from.explicit_hash_key());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRecord::CopyFrom(const PutRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void PutRecord::Swap(PutRecord* other) {
  if (other != this) {
    std::swap(stream_name_, other->stream_name_);
    std::swap(partition_key_, other->partition_key_);
    std::swap(explicit_hash_key_, other->explicit_hash_key_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRecord_descriptor_;
  metadata.reflection = PutRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Flush::kStreamNameFieldNumber;
#endif  // !_MSC_VER

Flush::Flush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Flush)
}

void Flush::InitAsDefaultInstance() {
}

Flush::Flush(const Flush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Flush)
}

void Flush::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Flush::~Flush() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Flush)
  SharedDtor();
}

void Flush::SharedDtor() {
  if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stream_name_;
  }
  if (this != default_instance_) {
  }
}

void Flush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Flush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Flush_descriptor_;
}

const Flush& Flush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Flush* Flush::default_instance_ = NULL;

Flush* Flush::New() const {
  return new Flush;
}

void Flush::Clear() {
  if (has_stream_name()) {
    if (stream_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      stream_name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Flush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Flush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stream_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stream_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Flush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Flush)
  return false;
#undef DO_
}

void Flush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Flush)
  // optional string stream_name = 1;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Flush)
}

::google::protobuf::uint8* Flush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Flush)
  // optional string stream_name = 1;
  if (has_stream_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Flush)
  return target;
}

int Flush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stream_name = 1;
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Flush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Flush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Flush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Flush::MergeFrom(const Flush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_name()) {
      set_stream_name(from.stream_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Flush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flush::CopyFrom(const Flush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flush::IsInitialized() const {

  return true;
}

void Flush::Swap(Flush* other) {
  if (other != this) {
    std::swap(stream_name_, other->stream_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Flush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Flush_descriptor_;
  metadata.reflection = Flush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attempt::kDelayFieldNumber;
const int Attempt::kDurationFieldNumber;
const int Attempt::kSuccessFieldNumber;
const int Attempt::kErrorCodeFieldNumber;
const int Attempt::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

Attempt::Attempt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Attempt)
}

void Attempt::InitAsDefaultInstance() {
}

Attempt::Attempt(const Attempt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Attempt)
}

void Attempt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  delay_ = 0u;
  duration_ = 0u;
  success_ = false;
  error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attempt::~Attempt() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Attempt)
  SharedDtor();
}

void Attempt::SharedDtor() {
  if (error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_code_;
  }
  if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void Attempt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attempt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attempt_descriptor_;
}

const Attempt& Attempt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Attempt* Attempt::default_instance_ = NULL;

Attempt* Attempt::New() const {
  return new Attempt;
}

void Attempt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Attempt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(delay_, duration_);
    success_ = false;
    if (has_error_code()) {
      if (error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_code_->clear();
      }
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attempt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Attempt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // required uint32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // required bool success = 3;
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_code;
        break;
      }

      // optional string error_code = 4;
      case 4: {
        if (tag == 34) {
         parse_error_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_code().data(), this->error_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error_message;
        break;
      }

      // optional string error_message = 5;
      case 5: {
        if (tag == 42) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Attempt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Attempt)
  return false;
#undef DO_
}

void Attempt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Attempt)
  // required uint32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delay(), output);
  }

  // required uint32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // required bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional string error_code = 4;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_code().data(), this->error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_code(), output);
  }

  // optional string error_message = 5;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Attempt)
}

::google::protobuf::uint8* Attempt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Attempt)
  // required uint32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->delay(), target);
  }

  // required uint32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // required bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional string error_code = 4;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_code().data(), this->error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_code(), target);
  }

  // optional string error_message = 5;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Attempt)
  return target;
}

int Attempt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // required uint32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // required bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_code());
    }

    // optional string error_message = 5;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attempt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attempt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attempt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attempt::MergeFrom(const Attempt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attempt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attempt::CopyFrom(const Attempt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attempt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Attempt::Swap(Attempt* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(duration_, other->duration_);
    std::swap(success_, other->success_);
    std::swap(error_code_, other->error_code_);
    std::swap(error_message_, other->error_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attempt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attempt_descriptor_;
  metadata.reflection = Attempt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutRecordResult::kAttemptsFieldNumber;
const int PutRecordResult::kSuccessFieldNumber;
const int PutRecordResult::kShardIdFieldNumber;
const int PutRecordResult::kSequenceNumberFieldNumber;
#endif  // !_MSC_VER

PutRecordResult::PutRecordResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.PutRecordResult)
}

void PutRecordResult::InitAsDefaultInstance() {
}

PutRecordResult::PutRecordResult(const PutRecordResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.PutRecordResult)
}

void PutRecordResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  shard_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutRecordResult::~PutRecordResult() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.PutRecordResult)
  SharedDtor();
}

void PutRecordResult::SharedDtor() {
  if (shard_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shard_id_;
  }
  if (sequence_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sequence_number_;
  }
  if (this != default_instance_) {
  }
}

void PutRecordResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRecordResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRecordResult_descriptor_;
}

const PutRecordResult& PutRecordResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

PutRecordResult* PutRecordResult::default_instance_ = NULL;

PutRecordResult* PutRecordResult::New() const {
  return new PutRecordResult;
}

void PutRecordResult::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    success_ = false;
    if (has_shard_id()) {
      if (shard_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shard_id_->clear();
      }
    }
    if (has_sequence_number()) {
      if (sequence_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sequence_number_->clear();
      }
    }
  }
  attempts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutRecordResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.PutRecordResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
      case 1: {
        if (tag == 10) {
         parse_attempts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attempts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attempts;
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shard_id;
        break;
      }

      // optional string shard_id = 3;
      case 3: {
        if (tag == 26) {
         parse_shard_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shard_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shard_id().data(), this->shard_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shard_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sequence_number;
        break;
      }

      // optional string sequence_number = 4;
      case 4: {
        if (tag == 34) {
         parse_sequence_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_number().data(), this->sequence_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sequence_number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.PutRecordResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.PutRecordResult)
  return false;
#undef DO_
}

void PutRecordResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.PutRecordResult)
  // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
  for (int i = 0; i < this->attempts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attempts(i), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional string shard_id = 3;
  if (has_shard_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shard_id().data(), this->shard_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shard_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shard_id(), output);
  }

  // optional string sequence_number = 4;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_number().data(), this->sequence_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sequence_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.PutRecordResult)
}

::google::protobuf::uint8* PutRecordResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.PutRecordResult)
  // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
  for (int i = 0; i < this->attempts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attempts(i), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional string shard_id = 3;
  if (has_shard_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shard_id().data(), this->shard_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shard_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shard_id(), target);
  }

  // optional string sequence_number = 4;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_number().data(), this->sequence_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sequence_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sequence_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.PutRecordResult)
  return target;
}

int PutRecordResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string shard_id = 3;
    if (has_shard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shard_id());
    }

    // optional string sequence_number = 4;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_number());
    }

  }
  // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
  total_size += 1 * this->attempts_size();
  for (int i = 0; i < this->attempts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attempts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRecordResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutRecordResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutRecordResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutRecordResult::MergeFrom(const PutRecordResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  attempts_.MergeFrom(from.attempts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_shard_id()) {
      set_shard_id(from.shard_id());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutRecordResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRecordResult::CopyFrom(const PutRecordResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRecordResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attempts())) return false;
  return true;
}

void PutRecordResult::Swap(PutRecordResult* other) {
  if (other != this) {
    attempts_.Swap(&other->attempts_);
    std::swap(success_, other->success_);
    std::swap(shard_id_, other->shard_id_);
    std::swap(sequence_number_, other->sequence_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutRecordResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRecordResult_descriptor_;
  metadata.reflection = PutRecordResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Credentials::kAkidFieldNumber;
const int Credentials::kSecretKeyFieldNumber;
const int Credentials::kTokenFieldNumber;
#endif  // !_MSC_VER

Credentials::Credentials()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Credentials)
}

void Credentials::InitAsDefaultInstance() {
}

Credentials::Credentials(const Credentials& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Credentials)
}

void Credentials::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  akid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Credentials::~Credentials() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Credentials)
  SharedDtor();
}

void Credentials::SharedDtor() {
  if (akid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete akid_;
  }
  if (secret_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secret_key_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void Credentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Credentials::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Credentials_descriptor_;
}

const Credentials& Credentials::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Credentials* Credentials::default_instance_ = NULL;

Credentials* Credentials::New() const {
  return new Credentials;
}

void Credentials::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_akid()) {
      if (akid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        akid_->clear();
      }
    }
    if (has_secret_key()) {
      if (secret_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secret_key_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Credentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Credentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string akid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_akid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->akid().data(), this->akid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "akid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secret_key;
        break;
      }

      // required string secret_key = 2;
      case 2: {
        if (tag == 18) {
         parse_secret_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret_key().data(), this->secret_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secret_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Credentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Credentials)
  return false;
#undef DO_
}

void Credentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Credentials)
  // required string akid = 1;
  if (has_akid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->akid().data(), this->akid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "akid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->akid(), output);
  }

  // required string secret_key = 2;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secret_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secret_key(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Credentials)
}

::google::protobuf::uint8* Credentials::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Credentials)
  // required string akid = 1;
  if (has_akid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->akid().data(), this->akid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "akid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->akid(), target);
  }

  // required string secret_key = 2;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secret_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret_key(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Credentials)
  return target;
}

int Credentials::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string akid = 1;
    if (has_akid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->akid());
    }

    // required string secret_key = 2;
    if (has_secret_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret_key());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Credentials::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Credentials* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Credentials*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Credentials::MergeFrom(const Credentials& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_akid()) {
      set_akid(from.akid());
    }
    if (from.has_secret_key()) {
      set_secret_key(from.secret_key());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Credentials::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credentials::CopyFrom(const Credentials& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credentials::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Credentials::Swap(Credentials* other) {
  if (other != this) {
    std::swap(akid_, other->akid_);
    std::swap(secret_key_, other->secret_key_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Credentials::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Credentials_descriptor_;
  metadata.reflection = Credentials_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCredentials::kForMetricsFieldNumber;
const int SetCredentials::kCredentialsFieldNumber;
#endif  // !_MSC_VER

SetCredentials::SetCredentials()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.SetCredentials)
}

void SetCredentials::InitAsDefaultInstance() {
  credentials_ = const_cast< ::aws::kinesis::protobuf::Credentials*>(&::aws::kinesis::protobuf::Credentials::default_instance());
}

SetCredentials::SetCredentials(const SetCredentials& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.SetCredentials)
}

void SetCredentials::SharedCtor() {
  _cached_size_ = 0;
  for_metrics_ = false;
  credentials_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCredentials::~SetCredentials() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.SetCredentials)
  SharedDtor();
}

void SetCredentials::SharedDtor() {
  if (this != default_instance_) {
    delete credentials_;
  }
}

void SetCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCredentials::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCredentials_descriptor_;
}

const SetCredentials& SetCredentials::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SetCredentials* SetCredentials::default_instance_ = NULL;

SetCredentials* SetCredentials::New() const {
  return new SetCredentials;
}

void SetCredentials::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    for_metrics_ = false;
    if (has_credentials()) {
      if (credentials_ != NULL) credentials_->::aws::kinesis::protobuf::Credentials::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.SetCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool for_metrics = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_metrics_)));
          set_has_for_metrics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_credentials;
        break;
      }

      // required .aws.kinesis.protobuf.Credentials credentials = 2;
      case 2: {
        if (tag == 18) {
         parse_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.SetCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.SetCredentials)
  return false;
#undef DO_
}

void SetCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.SetCredentials)
  // optional bool for_metrics = 1;
  if (has_for_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->for_metrics(), output);
  }

  // required .aws.kinesis.protobuf.Credentials credentials = 2;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->credentials(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.SetCredentials)
}

::google::protobuf::uint8* SetCredentials::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.SetCredentials)
  // optional bool for_metrics = 1;
  if (has_for_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->for_metrics(), target);
  }

  // required .aws.kinesis.protobuf.Credentials credentials = 2;
  if (has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->credentials(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.SetCredentials)
  return target;
}

int SetCredentials::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool for_metrics = 1;
    if (has_for_metrics()) {
      total_size += 1 + 1;
    }

    // required .aws.kinesis.protobuf.Credentials credentials = 2;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credentials());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCredentials::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCredentials* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCredentials*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCredentials::MergeFrom(const SetCredentials& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_for_metrics()) {
      set_for_metrics(from.for_metrics());
    }
    if (from.has_credentials()) {
      mutable_credentials()->::aws::kinesis::protobuf::Credentials::MergeFrom(from.credentials());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCredentials::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCredentials::CopyFrom(const SetCredentials& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCredentials::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_credentials()) {
    if (!this->credentials().IsInitialized()) return false;
  }
  return true;
}

void SetCredentials::Swap(SetCredentials* other) {
  if (other != this) {
    std::swap(for_metrics_, other->for_metrics_);
    std::swap(credentials_, other->credentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCredentials::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCredentials_descriptor_;
  metadata.reflection = SetCredentials_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dimension::kKeyFieldNumber;
const int Dimension::kValueFieldNumber;
#endif  // !_MSC_VER

Dimension::Dimension()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Dimension)
}

void Dimension::InitAsDefaultInstance() {
}

Dimension::Dimension(const Dimension& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Dimension)
}

void Dimension::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Dimension)
  SharedDtor();
}

void Dimension::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Dimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dimension::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dimension_descriptor_;
}

const Dimension& Dimension::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Dimension* Dimension::default_instance_ = NULL;

Dimension* Dimension::New() const {
  return new Dimension;
}

void Dimension::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Dimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Dimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Dimension)
  return false;
#undef DO_
}

void Dimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Dimension)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Dimension)
}

::google::protobuf::uint8* Dimension::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Dimension)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Dimension)
  return target;
}

int Dimension::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dimension::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dimension* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dimension*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dimension::MergeFrom(const Dimension& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dimension::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dimension::CopyFrom(const Dimension& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Dimension::Swap(Dimension* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dimension::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dimension_descriptor_;
  metadata.reflection = Dimension_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stats::kCountFieldNumber;
const int Stats::kSumFieldNumber;
const int Stats::kMeanFieldNumber;
const int Stats::kMinFieldNumber;
const int Stats::kMaxFieldNumber;
#endif  // !_MSC_VER

Stats::Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Stats)
}

void Stats::InitAsDefaultInstance() {
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Stats)
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  sum_ = 0;
  mean_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New() const {
  return new Stats;
}

void Stats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Stats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(count_, max_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double count = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sum;
        break;
      }

      // required double sum = 2;
      case 2: {
        if (tag == 17) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_mean;
        break;
      }

      // required double mean = 3;
      case 3: {
        if (tag == 25) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_min;
        break;
      }

      // required double min = 4;
      case 4: {
        if (tag == 33) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max;
        break;
      }

      // required double max = 5;
      case 5: {
        if (tag == 41) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Stats)
  // required double count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->count(), output);
  }

  // required double sum = 2;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sum(), output);
  }

  // required double mean = 3;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mean(), output);
  }

  // required double min = 4;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min(), output);
  }

  // required double max = 5;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Stats)
}

::google::protobuf::uint8* Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Stats)
  // required double count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->count(), target);
  }

  // required double sum = 2;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sum(), target);
  }

  // required double mean = 3;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mean(), target);
  }

  // required double min = 4;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min(), target);
  }

  // required double max = 5;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Stats)
  return target;
}

int Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double count = 1;
    if (has_count()) {
      total_size += 1 + 8;
    }

    // required double sum = 2;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // required double mean = 3;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // required double min = 4;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // required double max = 5;
    if (has_max()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Stats::Swap(Stats* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(sum_, other->sum_);
    std::swap(mean_, other->mean_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metric::kNameFieldNumber;
const int Metric::kDimensionsFieldNumber;
const int Metric::kStatsFieldNumber;
const int Metric::kSecondsFieldNumber;
#endif  // !_MSC_VER

Metric::Metric()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.Metric)
}

void Metric::InitAsDefaultInstance() {
  stats_ = const_cast< ::aws::kinesis::protobuf::Stats*>(&::aws::kinesis::protobuf::Stats::default_instance());
}

Metric::Metric(const Metric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.Metric)
}

void Metric::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_ = NULL;
  seconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.Metric)
  SharedDtor();
}

void Metric::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete stats_;
  }
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_descriptor_;
}

const Metric& Metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Metric* Metric::default_instance_ = NULL;

Metric* Metric::New() const {
  return new Metric;
}

void Metric::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::aws::kinesis::protobuf::Stats::Clear();
    }
    seconds_ = GOOGLE_ULONGLONG(0);
  }
  dimensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dimensions;
        break;
      }

      // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
      case 2: {
        if (tag == 18) {
         parse_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dimensions;
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }

      // required .aws.kinesis.protobuf.Stats stats = 3;
      case 3: {
        if (tag == 26) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seconds;
        break;
      }

      // required uint64 seconds = 4;
      case 4: {
        if (tag == 32) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.Metric)
  return false;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.Metric)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dimensions(i), output);
  }

  // required .aws.kinesis.protobuf.Stats stats = 3;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(), output);
  }

  // required uint64 seconds = 4;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.Metric)
}

::google::protobuf::uint8* Metric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.Metric)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dimensions(i), target);
  }

  // required .aws.kinesis.protobuf.Stats stats = 3;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(), target);
  }

  // required uint64 seconds = 4;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.Metric)
  return target;
}

int Metric::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .aws.kinesis.protobuf.Stats stats = 3;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // required uint64 seconds = 4;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seconds());
    }

  }
  // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
  total_size += 1 * this->dimensions_size();
  for (int i = 0; i < this->dimensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dimensions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
  GOOGLE_CHECK_NE(&from, this);
  dimensions_.MergeFrom(from.dimensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_stats()) {
      mutable_stats()->::aws::kinesis::protobuf::Stats::MergeFrom(from.stats());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dimensions())) return false;
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  return true;
}

void Metric::Swap(Metric* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    dimensions_.Swap(&other->dimensions_);
    std::swap(stats_, other->stats_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metric_descriptor_;
  metadata.reflection = Metric_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricsRequest::kNameFieldNumber;
const int MetricsRequest::kSecondsFieldNumber;
#endif  // !_MSC_VER

MetricsRequest::MetricsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.MetricsRequest)
}

void MetricsRequest::InitAsDefaultInstance() {
}

MetricsRequest::MetricsRequest(const MetricsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.MetricsRequest)
}

void MetricsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seconds_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricsRequest::~MetricsRequest() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.MetricsRequest)
  SharedDtor();
}

void MetricsRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MetricsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsRequest_descriptor_;
}

const MetricsRequest& MetricsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

MetricsRequest* MetricsRequest::default_instance_ = NULL;

MetricsRequest* MetricsRequest::New() const {
  return new MetricsRequest;
}

void MetricsRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    seconds_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.MetricsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seconds;
        break;
      }

      // optional uint64 seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.MetricsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.MetricsRequest)
  return false;
#undef DO_
}

void MetricsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.MetricsRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 seconds = 2;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.MetricsRequest)
}

::google::protobuf::uint8* MetricsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.MetricsRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 seconds = 2;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.MetricsRequest)
  return target;
}

int MetricsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 seconds = 2;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricsRequest::MergeFrom(const MetricsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsRequest::CopyFrom(const MetricsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsRequest::IsInitialized() const {

  return true;
}

void MetricsRequest::Swap(MetricsRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsRequest_descriptor_;
  metadata.reflection = MetricsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricsResponse::kMetricsFieldNumber;
#endif  // !_MSC_VER

MetricsResponse::MetricsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aws.kinesis.protobuf.MetricsResponse)
}

void MetricsResponse::InitAsDefaultInstance() {
}

MetricsResponse::MetricsResponse(const MetricsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aws.kinesis.protobuf.MetricsResponse)
}

void MetricsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricsResponse::~MetricsResponse() {
  // @@protoc_insertion_point(destructor:aws.kinesis.protobuf.MetricsResponse)
  SharedDtor();
}

void MetricsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetricsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsResponse_descriptor_;
}

const MetricsResponse& MetricsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

MetricsResponse* MetricsResponse::default_instance_ = NULL;

MetricsResponse* MetricsResponse::New() const {
  return new MetricsResponse;
}

void MetricsResponse::Clear() {
  metrics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aws.kinesis.protobuf.MetricsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aws.kinesis.protobuf.Metric metrics = 1;
      case 1: {
        if (tag == 10) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_metrics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aws.kinesis.protobuf.MetricsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aws.kinesis.protobuf.MetricsResponse)
  return false;
#undef DO_
}

void MetricsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aws.kinesis.protobuf.MetricsResponse)
  // repeated .aws.kinesis.protobuf.Metric metrics = 1;
  for (int i = 0; i < this->metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aws.kinesis.protobuf.MetricsResponse)
}

::google::protobuf::uint8* MetricsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aws.kinesis.protobuf.MetricsResponse)
  // repeated .aws.kinesis.protobuf.Metric metrics = 1;
  for (int i = 0; i < this->metrics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metrics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aws.kinesis.protobuf.MetricsResponse)
  return target;
}

int MetricsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .aws.kinesis.protobuf.Metric metrics = 1;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricsResponse::MergeFrom(const MetricsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  metrics_.MergeFrom(from.metrics_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsResponse::CopyFrom(const MetricsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->metrics())) return false;
  return true;
}

void MetricsResponse::Swap(MetricsResponse* other) {
  if (other != this) {
    metrics_.Swap(&other->metrics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsResponse_descriptor_;
  metadata.reflection = MetricsResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws

// @@protoc_insertion_point(global_scope)
