// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace aws {
namespace kinesis {
namespace protobuf {
class AggregatedRecord;
class AggregatedRecordDefaultTypeInternal;
extern AggregatedRecordDefaultTypeInternal _AggregatedRecord_default_instance_;
class Attempt;
class AttemptDefaultTypeInternal;
extern AttemptDefaultTypeInternal _Attempt_default_instance_;
class Credentials;
class CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class Dimension;
class DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class Flush;
class FlushDefaultTypeInternal;
extern FlushDefaultTypeInternal _Flush_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricsRequest;
class MetricsRequestDefaultTypeInternal;
extern MetricsRequestDefaultTypeInternal _MetricsRequest_default_instance_;
class MetricsResponse;
class MetricsResponseDefaultTypeInternal;
extern MetricsResponseDefaultTypeInternal _MetricsResponse_default_instance_;
class PutRecord;
class PutRecordDefaultTypeInternal;
extern PutRecordDefaultTypeInternal _PutRecord_default_instance_;
class PutRecordResult;
class PutRecordResultDefaultTypeInternal;
extern PutRecordResultDefaultTypeInternal _PutRecordResult_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class SetCredentials;
class SetCredentialsDefaultTypeInternal;
extern SetCredentialsDefaultTypeInternal _SetCredentials_default_instance_;
class Stats;
class StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws
PROTOBUF_NAMESPACE_OPEN
template<> ::aws::kinesis::protobuf::AggregatedRecord* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::AggregatedRecord>(Arena*);
template<> ::aws::kinesis::protobuf::Attempt* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Attempt>(Arena*);
template<> ::aws::kinesis::protobuf::Credentials* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Credentials>(Arena*);
template<> ::aws::kinesis::protobuf::Dimension* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Dimension>(Arena*);
template<> ::aws::kinesis::protobuf::Flush* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Flush>(Arena*);
template<> ::aws::kinesis::protobuf::Message* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Message>(Arena*);
template<> ::aws::kinesis::protobuf::Metric* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Metric>(Arena*);
template<> ::aws::kinesis::protobuf::MetricsRequest* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::MetricsRequest>(Arena*);
template<> ::aws::kinesis::protobuf::MetricsResponse* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::MetricsResponse>(Arena*);
template<> ::aws::kinesis::protobuf::PutRecord* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::PutRecord>(Arena*);
template<> ::aws::kinesis::protobuf::PutRecordResult* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::PutRecordResult>(Arena*);
template<> ::aws::kinesis::protobuf::Record* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Record>(Arena*);
template<> ::aws::kinesis::protobuf::SetCredentials* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::SetCredentials>(Arena*);
template<> ::aws::kinesis::protobuf::Stats* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Stats>(Arena*);
template<> ::aws::kinesis::protobuf::Tag* Arena::CreateMaybeMessage<::aws::kinesis::protobuf::Tag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aws {
namespace kinesis {
namespace protobuf {

// ===================================================================

class Tag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Tag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Tag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Record :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kDataFieldNumber = 3,
    kPartitionKeyIndexFieldNumber = 1,
    kExplicitHashKeyIndexFieldNumber = 2,
  };
  // repeated .aws.kinesis.protobuf.Tag tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::aws::kinesis::protobuf::Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >*
      mutable_tags();
  private:
  const ::aws::kinesis::protobuf::Tag& _internal_tags(int index) const;
  ::aws::kinesis::protobuf::Tag* _internal_add_tags();
  public:
  const ::aws::kinesis::protobuf::Tag& tags(int index) const;
  ::aws::kinesis::protobuf::Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >&
      tags() const;

  // required bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required uint64 partition_key_index = 1;
  bool has_partition_key_index() const;
  private:
  bool _internal_has_partition_key_index() const;
  public:
  void clear_partition_key_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 partition_key_index() const;
  void set_partition_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_partition_key_index() const;
  void _internal_set_partition_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 explicit_hash_key_index = 2;
  bool has_explicit_hash_key_index() const;
  private:
  bool _internal_has_explicit_hash_key_index() const;
  public:
  void clear_explicit_hash_key_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 explicit_hash_key_index() const;
  void set_explicit_hash_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_explicit_hash_key_index() const;
  void _internal_set_explicit_hash_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Record)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 partition_key_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 explicit_hash_key_index_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class AggregatedRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.AggregatedRecord) */ {
 public:
  AggregatedRecord();
  virtual ~AggregatedRecord();

  AggregatedRecord(const AggregatedRecord& from);
  AggregatedRecord(AggregatedRecord&& from) noexcept
    : AggregatedRecord() {
    *this = ::std::move(from);
  }

  inline AggregatedRecord& operator=(const AggregatedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedRecord& operator=(AggregatedRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregatedRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatedRecord* internal_default_instance() {
    return reinterpret_cast<const AggregatedRecord*>(
               &_AggregatedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AggregatedRecord& a, AggregatedRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatedRecord* New() const final {
    return CreateMaybeMessage<AggregatedRecord>(nullptr);
  }

  AggregatedRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatedRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregatedRecord& from);
  void MergeFrom(const AggregatedRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregatedRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.AggregatedRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionKeyTableFieldNumber = 1,
    kExplicitHashKeyTableFieldNumber = 2,
    kRecordsFieldNumber = 3,
  };
  // repeated string partition_key_table = 1;
  int partition_key_table_size() const;
  private:
  int _internal_partition_key_table_size() const;
  public:
  void clear_partition_key_table();
  const std::string& partition_key_table(int index) const;
  std::string* mutable_partition_key_table(int index);
  void set_partition_key_table(int index, const std::string& value);
  void set_partition_key_table(int index, std::string&& value);
  void set_partition_key_table(int index, const char* value);
  void set_partition_key_table(int index, const char* value, size_t size);
  std::string* add_partition_key_table();
  void add_partition_key_table(const std::string& value);
  void add_partition_key_table(std::string&& value);
  void add_partition_key_table(const char* value);
  void add_partition_key_table(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& partition_key_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_partition_key_table();
  private:
  const std::string& _internal_partition_key_table(int index) const;
  std::string* _internal_add_partition_key_table();
  public:

  // repeated string explicit_hash_key_table = 2;
  int explicit_hash_key_table_size() const;
  private:
  int _internal_explicit_hash_key_table_size() const;
  public:
  void clear_explicit_hash_key_table();
  const std::string& explicit_hash_key_table(int index) const;
  std::string* mutable_explicit_hash_key_table(int index);
  void set_explicit_hash_key_table(int index, const std::string& value);
  void set_explicit_hash_key_table(int index, std::string&& value);
  void set_explicit_hash_key_table(int index, const char* value);
  void set_explicit_hash_key_table(int index, const char* value, size_t size);
  std::string* add_explicit_hash_key_table();
  void add_explicit_hash_key_table(const std::string& value);
  void add_explicit_hash_key_table(std::string&& value);
  void add_explicit_hash_key_table(const char* value);
  void add_explicit_hash_key_table(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& explicit_hash_key_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_explicit_hash_key_table();
  private:
  const std::string& _internal_explicit_hash_key_table(int index) const;
  std::string* _internal_add_explicit_hash_key_table();
  public:

  // repeated .aws.kinesis.protobuf.Record records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::aws::kinesis::protobuf::Record* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Record >*
      mutable_records();
  private:
  const ::aws::kinesis::protobuf::Record& _internal_records(int index) const;
  ::aws::kinesis::protobuf::Record* _internal_add_records();
  public:
  const ::aws::kinesis::protobuf::Record& records(int index) const;
  ::aws::kinesis::protobuf::Record* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.AggregatedRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> partition_key_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> explicit_hash_key_table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Record > records_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum ActualMessageCase {
    kPutRecord = 3,
    kFlush = 4,
    kPutRecordResult = 5,
    kConfiguration = 6,
    kMetricsRequest = 7,
    kMetricsResponse = 8,
    kSetCredentials = 9,
    ACTUAL_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceIdFieldNumber = 2,
    kPutRecordFieldNumber = 3,
    kFlushFieldNumber = 4,
    kPutRecordResultFieldNumber = 5,
    kConfigurationFieldNumber = 6,
    kMetricsRequestFieldNumber = 7,
    kMetricsResponseFieldNumber = 8,
    kSetCredentialsFieldNumber = 9,
  };
  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 source_id = 2;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id() const;
  void set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_id() const;
  void _internal_set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .aws.kinesis.protobuf.PutRecord put_record = 3;
  bool has_put_record() const;
  private:
  bool _internal_has_put_record() const;
  public:
  void clear_put_record();
  const ::aws::kinesis::protobuf::PutRecord& put_record() const;
  ::aws::kinesis::protobuf::PutRecord* release_put_record();
  ::aws::kinesis::protobuf::PutRecord* mutable_put_record();
  void set_allocated_put_record(::aws::kinesis::protobuf::PutRecord* put_record);
  private:
  const ::aws::kinesis::protobuf::PutRecord& _internal_put_record() const;
  ::aws::kinesis::protobuf::PutRecord* _internal_mutable_put_record();
  public:

  // optional .aws.kinesis.protobuf.Flush flush = 4;
  bool has_flush() const;
  private:
  bool _internal_has_flush() const;
  public:
  void clear_flush();
  const ::aws::kinesis::protobuf::Flush& flush() const;
  ::aws::kinesis::protobuf::Flush* release_flush();
  ::aws::kinesis::protobuf::Flush* mutable_flush();
  void set_allocated_flush(::aws::kinesis::protobuf::Flush* flush);
  private:
  const ::aws::kinesis::protobuf::Flush& _internal_flush() const;
  ::aws::kinesis::protobuf::Flush* _internal_mutable_flush();
  public:

  // optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
  bool has_put_record_result() const;
  private:
  bool _internal_has_put_record_result() const;
  public:
  void clear_put_record_result();
  const ::aws::kinesis::protobuf::PutRecordResult& put_record_result() const;
  ::aws::kinesis::protobuf::PutRecordResult* release_put_record_result();
  ::aws::kinesis::protobuf::PutRecordResult* mutable_put_record_result();
  void set_allocated_put_record_result(::aws::kinesis::protobuf::PutRecordResult* put_record_result);
  private:
  const ::aws::kinesis::protobuf::PutRecordResult& _internal_put_record_result() const;
  ::aws::kinesis::protobuf::PutRecordResult* _internal_mutable_put_record_result();
  public:

  // optional .aws.kinesis.protobuf.Configuration configuration = 6;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::aws::kinesis::protobuf::Configuration& configuration() const;
  ::aws::kinesis::protobuf::Configuration* release_configuration();
  ::aws::kinesis::protobuf::Configuration* mutable_configuration();
  void set_allocated_configuration(::aws::kinesis::protobuf::Configuration* configuration);
  private:
  const ::aws::kinesis::protobuf::Configuration& _internal_configuration() const;
  ::aws::kinesis::protobuf::Configuration* _internal_mutable_configuration();
  public:

  // optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
  bool has_metrics_request() const;
  private:
  bool _internal_has_metrics_request() const;
  public:
  void clear_metrics_request();
  const ::aws::kinesis::protobuf::MetricsRequest& metrics_request() const;
  ::aws::kinesis::protobuf::MetricsRequest* release_metrics_request();
  ::aws::kinesis::protobuf::MetricsRequest* mutable_metrics_request();
  void set_allocated_metrics_request(::aws::kinesis::protobuf::MetricsRequest* metrics_request);
  private:
  const ::aws::kinesis::protobuf::MetricsRequest& _internal_metrics_request() const;
  ::aws::kinesis::protobuf::MetricsRequest* _internal_mutable_metrics_request();
  public:

  // optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
  bool has_metrics_response() const;
  private:
  bool _internal_has_metrics_response() const;
  public:
  void clear_metrics_response();
  const ::aws::kinesis::protobuf::MetricsResponse& metrics_response() const;
  ::aws::kinesis::protobuf::MetricsResponse* release_metrics_response();
  ::aws::kinesis::protobuf::MetricsResponse* mutable_metrics_response();
  void set_allocated_metrics_response(::aws::kinesis::protobuf::MetricsResponse* metrics_response);
  private:
  const ::aws::kinesis::protobuf::MetricsResponse& _internal_metrics_response() const;
  ::aws::kinesis::protobuf::MetricsResponse* _internal_mutable_metrics_response();
  public:

  // optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
  bool has_set_credentials() const;
  private:
  bool _internal_has_set_credentials() const;
  public:
  void clear_set_credentials();
  const ::aws::kinesis::protobuf::SetCredentials& set_credentials() const;
  ::aws::kinesis::protobuf::SetCredentials* release_set_credentials();
  ::aws::kinesis::protobuf::SetCredentials* mutable_set_credentials();
  void set_allocated_set_credentials(::aws::kinesis::protobuf::SetCredentials* set_credentials);
  private:
  const ::aws::kinesis::protobuf::SetCredentials& _internal_set_credentials() const;
  ::aws::kinesis::protobuf::SetCredentials* _internal_mutable_set_credentials();
  public:

  void clear_actual_message();
  ActualMessageCase actual_message_case() const;
  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Message)
 private:
  class _Internal;
  void set_has_put_record();
  void set_has_flush();
  void set_has_put_record_result();
  void set_has_configuration();
  void set_has_metrics_request();
  void set_has_metrics_response();
  void set_has_set_credentials();

  inline bool has_actual_message() const;
  inline void clear_has_actual_message();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_id_;
  union ActualMessageUnion {
    ActualMessageUnion() {}
    ::aws::kinesis::protobuf::PutRecord* put_record_;
    ::aws::kinesis::protobuf::Flush* flush_;
    ::aws::kinesis::protobuf::PutRecordResult* put_record_result_;
    ::aws::kinesis::protobuf::Configuration* configuration_;
    ::aws::kinesis::protobuf::MetricsRequest* metrics_request_;
    ::aws::kinesis::protobuf::MetricsResponse* metrics_response_;
    ::aws::kinesis::protobuf::SetCredentials* set_credentials_;
  } actual_message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PutRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.PutRecord) */ {
 public:
  PutRecord();
  virtual ~PutRecord();

  PutRecord(const PutRecord& from);
  PutRecord(PutRecord&& from) noexcept
    : PutRecord() {
    *this = ::std::move(from);
  }

  inline PutRecord& operator=(const PutRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRecord& operator=(PutRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRecord* internal_default_instance() {
    return reinterpret_cast<const PutRecord*>(
               &_PutRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutRecord& a, PutRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRecord* New() const final {
    return CreateMaybeMessage<PutRecord>(nullptr);
  }

  PutRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRecord& from);
  void MergeFrom(const PutRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.PutRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 1,
    kPartitionKeyFieldNumber = 2,
    kExplicitHashKeyFieldNumber = 3,
    kDataFieldNumber = 4,
  };
  // required string stream_name = 1;
  bool has_stream_name() const;
  private:
  bool _internal_has_stream_name() const;
  public:
  void clear_stream_name();
  const std::string& stream_name() const;
  void set_stream_name(const std::string& value);
  void set_stream_name(std::string&& value);
  void set_stream_name(const char* value);
  void set_stream_name(const char* value, size_t size);
  std::string* mutable_stream_name();
  std::string* release_stream_name();
  void set_allocated_stream_name(std::string* stream_name);
  private:
  const std::string& _internal_stream_name() const;
  void _internal_set_stream_name(const std::string& value);
  std::string* _internal_mutable_stream_name();
  public:

  // required string partition_key = 2;
  bool has_partition_key() const;
  private:
  bool _internal_has_partition_key() const;
  public:
  void clear_partition_key();
  const std::string& partition_key() const;
  void set_partition_key(const std::string& value);
  void set_partition_key(std::string&& value);
  void set_partition_key(const char* value);
  void set_partition_key(const char* value, size_t size);
  std::string* mutable_partition_key();
  std::string* release_partition_key();
  void set_allocated_partition_key(std::string* partition_key);
  private:
  const std::string& _internal_partition_key() const;
  void _internal_set_partition_key(const std::string& value);
  std::string* _internal_mutable_partition_key();
  public:

  // optional string explicit_hash_key = 3;
  bool has_explicit_hash_key() const;
  private:
  bool _internal_has_explicit_hash_key() const;
  public:
  void clear_explicit_hash_key();
  const std::string& explicit_hash_key() const;
  void set_explicit_hash_key(const std::string& value);
  void set_explicit_hash_key(std::string&& value);
  void set_explicit_hash_key(const char* value);
  void set_explicit_hash_key(const char* value, size_t size);
  std::string* mutable_explicit_hash_key();
  std::string* release_explicit_hash_key();
  void set_allocated_explicit_hash_key(std::string* explicit_hash_key);
  private:
  const std::string& _internal_explicit_hash_key() const;
  void _internal_set_explicit_hash_key(const std::string& value);
  std::string* _internal_mutable_explicit_hash_key();
  public:

  // required bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.PutRecord)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explicit_hash_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Flush :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Flush) */ {
 public:
  Flush();
  virtual ~Flush();

  Flush(const Flush& from);
  Flush(Flush&& from) noexcept
    : Flush() {
    *this = ::std::move(from);
  }

  inline Flush& operator=(const Flush& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flush& operator=(Flush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Flush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flush* internal_default_instance() {
    return reinterpret_cast<const Flush*>(
               &_Flush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Flush& a, Flush& b) {
    a.Swap(&b);
  }
  inline void Swap(Flush* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flush* New() const final {
    return CreateMaybeMessage<Flush>(nullptr);
  }

  Flush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flush& from);
  void MergeFrom(const Flush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Flush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 1,
  };
  // optional string stream_name = 1;
  bool has_stream_name() const;
  private:
  bool _internal_has_stream_name() const;
  public:
  void clear_stream_name();
  const std::string& stream_name() const;
  void set_stream_name(const std::string& value);
  void set_stream_name(std::string&& value);
  void set_stream_name(const char* value);
  void set_stream_name(const char* value, size_t size);
  std::string* mutable_stream_name();
  std::string* release_stream_name();
  void set_allocated_stream_name(std::string* stream_name);
  private:
  const std::string& _internal_stream_name() const;
  void _internal_set_stream_name(const std::string& value);
  std::string* _internal_mutable_stream_name();
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Flush)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_name_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Attempt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Attempt) */ {
 public:
  Attempt();
  virtual ~Attempt();

  Attempt(const Attempt& from);
  Attempt(Attempt&& from) noexcept
    : Attempt() {
    *this = ::std::move(from);
  }

  inline Attempt& operator=(const Attempt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attempt& operator=(Attempt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attempt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attempt* internal_default_instance() {
    return reinterpret_cast<const Attempt*>(
               &_Attempt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Attempt& a, Attempt& b) {
    a.Swap(&b);
  }
  inline void Swap(Attempt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attempt* New() const final {
    return CreateMaybeMessage<Attempt>(nullptr);
  }

  Attempt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attempt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attempt& from);
  void MergeFrom(const Attempt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attempt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Attempt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 4,
    kErrorMessageFieldNumber = 5,
    kDelayFieldNumber = 1,
    kDurationFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // optional string error_code = 4;
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  const std::string& error_code() const;
  void set_error_code(const std::string& value);
  void set_error_code(std::string&& value);
  void set_error_code(const char* value);
  void set_error_code(const char* value, size_t size);
  std::string* mutable_error_code();
  std::string* release_error_code();
  void set_allocated_error_code(std::string* error_code);
  private:
  const std::string& _internal_error_code() const;
  void _internal_set_error_code(const std::string& value);
  std::string* _internal_mutable_error_code();
  public:

  // optional string error_message = 5;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // required uint32 delay = 1;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool success = 3;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Attempt)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  bool success_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PutRecordResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.PutRecordResult) */ {
 public:
  PutRecordResult();
  virtual ~PutRecordResult();

  PutRecordResult(const PutRecordResult& from);
  PutRecordResult(PutRecordResult&& from) noexcept
    : PutRecordResult() {
    *this = ::std::move(from);
  }

  inline PutRecordResult& operator=(const PutRecordResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRecordResult& operator=(PutRecordResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRecordResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRecordResult* internal_default_instance() {
    return reinterpret_cast<const PutRecordResult*>(
               &_PutRecordResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PutRecordResult& a, PutRecordResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRecordResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRecordResult* New() const final {
    return CreateMaybeMessage<PutRecordResult>(nullptr);
  }

  PutRecordResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRecordResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRecordResult& from);
  void MergeFrom(const PutRecordResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRecordResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.PutRecordResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttemptsFieldNumber = 1,
    kShardIdFieldNumber = 3,
    kSequenceNumberFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // repeated .aws.kinesis.protobuf.Attempt attempts = 1;
  int attempts_size() const;
  private:
  int _internal_attempts_size() const;
  public:
  void clear_attempts();
  ::aws::kinesis::protobuf::Attempt* mutable_attempts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >*
      mutable_attempts();
  private:
  const ::aws::kinesis::protobuf::Attempt& _internal_attempts(int index) const;
  ::aws::kinesis::protobuf::Attempt* _internal_add_attempts();
  public:
  const ::aws::kinesis::protobuf::Attempt& attempts(int index) const;
  ::aws::kinesis::protobuf::Attempt* add_attempts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >&
      attempts() const;

  // optional string shard_id = 3;
  bool has_shard_id() const;
  private:
  bool _internal_has_shard_id() const;
  public:
  void clear_shard_id();
  const std::string& shard_id() const;
  void set_shard_id(const std::string& value);
  void set_shard_id(std::string&& value);
  void set_shard_id(const char* value);
  void set_shard_id(const char* value, size_t size);
  std::string* mutable_shard_id();
  std::string* release_shard_id();
  void set_allocated_shard_id(std::string* shard_id);
  private:
  const std::string& _internal_shard_id() const;
  void _internal_set_shard_id(const std::string& value);
  std::string* _internal_mutable_shard_id();
  public:

  // optional string sequence_number = 4;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  const std::string& sequence_number() const;
  void set_sequence_number(const std::string& value);
  void set_sequence_number(std::string&& value);
  void set_sequence_number(const char* value);
  void set_sequence_number(const char* value, size_t size);
  std::string* mutable_sequence_number();
  std::string* release_sequence_number();
  void set_allocated_sequence_number(std::string* sequence_number);
  private:
  const std::string& _internal_sequence_number() const;
  void _internal_set_sequence_number(const std::string& value);
  std::string* _internal_mutable_sequence_number();
  public:

  // required bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.PutRecordResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt > attempts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_number_;
  bool success_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Credentials :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Credentials) */ {
 public:
  Credentials();
  virtual ~Credentials();

  Credentials(const Credentials& from);
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Credentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Credentials* New() const final {
    return CreateMaybeMessage<Credentials>(nullptr);
  }

  Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Credentials& from);
  void MergeFrom(const Credentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credentials* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Credentials";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAkidFieldNumber = 1,
    kSecretKeyFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // required string akid = 1;
  bool has_akid() const;
  private:
  bool _internal_has_akid() const;
  public:
  void clear_akid();
  const std::string& akid() const;
  void set_akid(const std::string& value);
  void set_akid(std::string&& value);
  void set_akid(const char* value);
  void set_akid(const char* value, size_t size);
  std::string* mutable_akid();
  std::string* release_akid();
  void set_allocated_akid(std::string* akid);
  private:
  const std::string& _internal_akid() const;
  void _internal_set_akid(const std::string& value);
  std::string* _internal_mutable_akid();
  public:

  // required string secret_key = 2;
  bool has_secret_key() const;
  private:
  bool _internal_has_secret_key() const;
  public:
  void clear_secret_key();
  const std::string& secret_key() const;
  void set_secret_key(const std::string& value);
  void set_secret_key(std::string&& value);
  void set_secret_key(const char* value);
  void set_secret_key(const char* value, size_t size);
  std::string* mutable_secret_key();
  std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // optional string token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Credentials)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr akid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SetCredentials :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.SetCredentials) */ {
 public:
  SetCredentials();
  virtual ~SetCredentials();

  SetCredentials(const SetCredentials& from);
  SetCredentials(SetCredentials&& from) noexcept
    : SetCredentials() {
    *this = ::std::move(from);
  }

  inline SetCredentials& operator=(const SetCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCredentials& operator=(SetCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCredentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCredentials* internal_default_instance() {
    return reinterpret_cast<const SetCredentials*>(
               &_SetCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetCredentials& a, SetCredentials& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCredentials* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCredentials* New() const final {
    return CreateMaybeMessage<SetCredentials>(nullptr);
  }

  SetCredentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCredentials>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCredentials& from);
  void MergeFrom(const SetCredentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCredentials* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.SetCredentials";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 2,
    kForMetricsFieldNumber = 1,
  };
  // required .aws.kinesis.protobuf.Credentials credentials = 2;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const ::aws::kinesis::protobuf::Credentials& credentials() const;
  ::aws::kinesis::protobuf::Credentials* release_credentials();
  ::aws::kinesis::protobuf::Credentials* mutable_credentials();
  void set_allocated_credentials(::aws::kinesis::protobuf::Credentials* credentials);
  private:
  const ::aws::kinesis::protobuf::Credentials& _internal_credentials() const;
  ::aws::kinesis::protobuf::Credentials* _internal_mutable_credentials();
  public:

  // optional bool for_metrics = 1;
  bool has_for_metrics() const;
  private:
  bool _internal_has_for_metrics() const;
  public:
  void clear_for_metrics();
  bool for_metrics() const;
  void set_for_metrics(bool value);
  private:
  bool _internal_for_metrics() const;
  void _internal_set_for_metrics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.SetCredentials)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::aws::kinesis::protobuf::Credentials* credentials_;
  bool for_metrics_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Dimension :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Dimension) */ {
 public:
  Dimension();
  virtual ~Dimension();

  Dimension(const Dimension& from);
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dimension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dimension* New() const final {
    return CreateMaybeMessage<Dimension>(nullptr);
  }

  Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dimension& from);
  void MergeFrom(const Dimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Dimension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Dimension)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Stats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Stats) */ {
 public:
  Stats();
  virtual ~Stats();

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(nullptr);
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Stats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kSumFieldNumber = 2,
    kMeanFieldNumber = 3,
    kMinFieldNumber = 4,
    kMaxFieldNumber = 5,
  };
  // required double count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  double count() const;
  void set_count(double value);
  private:
  double _internal_count() const;
  void _internal_set_count(double value);
  public:

  // required double sum = 2;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // required double mean = 3;
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  double mean() const;
  void set_mean(double value);
  private:
  double _internal_mean() const;
  void _internal_set_mean(double value);
  public:

  // required double min = 4;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // required double max = 5;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Stats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double count_;
  double sum_;
  double mean_;
  double min_;
  double max_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Metric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.Metric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 2,
    kNameFieldNumber = 1,
    kStatsFieldNumber = 3,
    kSecondsFieldNumber = 4,
  };
  // repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  ::aws::kinesis::protobuf::Dimension* mutable_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >*
      mutable_dimensions();
  private:
  const ::aws::kinesis::protobuf::Dimension& _internal_dimensions(int index) const;
  ::aws::kinesis::protobuf::Dimension* _internal_add_dimensions();
  public:
  const ::aws::kinesis::protobuf::Dimension& dimensions(int index) const;
  ::aws::kinesis::protobuf::Dimension* add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >&
      dimensions() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .aws.kinesis.protobuf.Stats stats = 3;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::aws::kinesis::protobuf::Stats& stats() const;
  ::aws::kinesis::protobuf::Stats* release_stats();
  ::aws::kinesis::protobuf::Stats* mutable_stats();
  void set_allocated_stats(::aws::kinesis::protobuf::Stats* stats);
  private:
  const ::aws::kinesis::protobuf::Stats& _internal_stats() const;
  ::aws::kinesis::protobuf::Stats* _internal_mutable_stats();
  public:

  // required uint64 seconds = 4;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.Metric)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension > dimensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::aws::kinesis::protobuf::Stats* stats_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.MetricsRequest) */ {
 public:
  MetricsRequest();
  virtual ~MetricsRequest();

  MetricsRequest(const MetricsRequest& from);
  MetricsRequest(MetricsRequest&& from) noexcept
    : MetricsRequest() {
    *this = ::std::move(from);
  }

  inline MetricsRequest& operator=(const MetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsRequest& operator=(MetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricsRequest* internal_default_instance() {
    return reinterpret_cast<const MetricsRequest*>(
               &_MetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MetricsRequest& a, MetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsRequest* New() const final {
    return CreateMaybeMessage<MetricsRequest>(nullptr);
  }

  MetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricsRequest& from);
  void MergeFrom(const MetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.MetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSecondsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 seconds = 2;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.MetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seconds_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class MetricsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aws.kinesis.protobuf.MetricsResponse) */ {
 public:
  MetricsResponse();
  virtual ~MetricsResponse();

  MetricsResponse(const MetricsResponse& from);
  MetricsResponse(MetricsResponse&& from) noexcept
    : MetricsResponse() {
    *this = ::std::move(from);
  }

  inline MetricsResponse& operator=(const MetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsResponse& operator=(MetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricsResponse* internal_default_instance() {
    return reinterpret_cast<const MetricsResponse*>(
               &_MetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MetricsResponse& a, MetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsResponse* New() const final {
    return CreateMaybeMessage<MetricsResponse>(nullptr);
  }

  MetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricsResponse& from);
  void MergeFrom(const MetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aws.kinesis.protobuf.MetricsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .aws.kinesis.protobuf.Metric metrics = 1;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::aws::kinesis::protobuf::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >*
      mutable_metrics();
  private:
  const ::aws::kinesis::protobuf::Metric& _internal_metrics(int index) const;
  ::aws::kinesis::protobuf::Metric* _internal_add_metrics();
  public:
  const ::aws::kinesis::protobuf::Metric& metrics(int index) const;
  ::aws::kinesis::protobuf::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:aws.kinesis.protobuf.MetricsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Metric > metrics_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tag

// required string key = 1;
inline bool Tag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Tag::has_key() const {
  return _internal_has_key();
}
inline void Tag::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tag::key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Tag.key)
  return _internal_key();
}
inline void Tag::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Tag.key)
}
inline std::string* Tag::mutable_key() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Tag.key)
  return _internal_mutable_key();
}
inline const std::string& Tag::_internal_key() const {
  return key_.GetNoArena();
}
inline void Tag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tag::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Tag.key)
}
inline void Tag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Tag.key)
}
inline void Tag::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Tag.key)
}
inline std::string* Tag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tag::release_key() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Tag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Tag.key)
}

// optional string value = 2;
inline bool Tag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Tag::has_value() const {
  return _internal_has_value();
}
inline void Tag::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Tag::value() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Tag.value)
  return _internal_value();
}
inline void Tag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Tag.value)
}
inline std::string* Tag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Tag.value)
  return _internal_mutable_value();
}
inline const std::string& Tag::_internal_value() const {
  return value_.GetNoArena();
}
inline void Tag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tag::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Tag.value)
}
inline void Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Tag.value)
}
inline void Tag::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Tag.value)
}
inline std::string* Tag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tag::release_value() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Tag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Tag.value)
}

// -------------------------------------------------------------------

// Record

// required uint64 partition_key_index = 1;
inline bool Record::_internal_has_partition_key_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Record::has_partition_key_index() const {
  return _internal_has_partition_key_index();
}
inline void Record::clear_partition_key_index() {
  partition_key_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Record::_internal_partition_key_index() const {
  return partition_key_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Record::partition_key_index() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.partition_key_index)
  return _internal_partition_key_index();
}
inline void Record::_internal_set_partition_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  partition_key_index_ = value;
}
inline void Record::set_partition_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_partition_key_index(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.partition_key_index)
}

// optional uint64 explicit_hash_key_index = 2;
inline bool Record::_internal_has_explicit_hash_key_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Record::has_explicit_hash_key_index() const {
  return _internal_has_explicit_hash_key_index();
}
inline void Record::clear_explicit_hash_key_index() {
  explicit_hash_key_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Record::_internal_explicit_hash_key_index() const {
  return explicit_hash_key_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Record::explicit_hash_key_index() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.explicit_hash_key_index)
  return _internal_explicit_hash_key_index();
}
inline void Record::_internal_set_explicit_hash_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_hash_key_index_ = value;
}
inline void Record::set_explicit_hash_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_explicit_hash_key_index(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.explicit_hash_key_index)
}

// required bytes data = 3;
inline bool Record::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Record::has_data() const {
  return _internal_has_data();
}
inline void Record::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Record::data() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.data)
  return _internal_data();
}
inline void Record::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Record.data)
}
inline std::string* Record::mutable_data() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Record.data)
  return _internal_mutable_data();
}
inline const std::string& Record::_internal_data() const {
  return data_.GetNoArena();
}
inline void Record::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Record.data)
}
inline void Record::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Record.data)
}
inline void Record::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Record.data)
}
inline std::string* Record::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_data() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Record.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Record.data)
}

// repeated .aws.kinesis.protobuf.Tag tags = 4;
inline int Record::_internal_tags_size() const {
  return tags_.size();
}
inline int Record::tags_size() const {
  return _internal_tags_size();
}
inline void Record::clear_tags() {
  tags_.Clear();
}
inline ::aws::kinesis::protobuf::Tag* Record::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Record.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >*
Record::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.Record.tags)
  return &tags_;
}
inline const ::aws::kinesis::protobuf::Tag& Record::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::aws::kinesis::protobuf::Tag& Record::tags(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Record.tags)
  return _internal_tags(index);
}
inline ::aws::kinesis::protobuf::Tag* Record::_internal_add_tags() {
  return tags_.Add();
}
inline ::aws::kinesis::protobuf::Tag* Record::add_tags() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.Record.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Tag >&
Record::tags() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.Record.tags)
  return tags_;
}

// -------------------------------------------------------------------

// AggregatedRecord

// repeated string partition_key_table = 1;
inline int AggregatedRecord::_internal_partition_key_table_size() const {
  return partition_key_table_.size();
}
inline int AggregatedRecord::partition_key_table_size() const {
  return _internal_partition_key_table_size();
}
inline void AggregatedRecord::clear_partition_key_table() {
  partition_key_table_.Clear();
}
inline std::string* AggregatedRecord::add_partition_key_table() {
  // @@protoc_insertion_point(field_add_mutable:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return _internal_add_partition_key_table();
}
inline const std::string& AggregatedRecord::_internal_partition_key_table(int index) const {
  return partition_key_table_.Get(index);
}
inline const std::string& AggregatedRecord::partition_key_table(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return _internal_partition_key_table(index);
}
inline std::string* AggregatedRecord::mutable_partition_key_table(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return partition_key_table_.Mutable(index);
}
inline void AggregatedRecord::set_partition_key_table(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  partition_key_table_.Mutable(index)->assign(value);
}
inline void AggregatedRecord::set_partition_key_table(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  partition_key_table_.Mutable(index)->assign(std::move(value));
}
inline void AggregatedRecord::set_partition_key_table(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_key_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::set_partition_key_table(int index, const char* value, size_t size) {
  partition_key_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline std::string* AggregatedRecord::_internal_add_partition_key_table() {
  return partition_key_table_.Add();
}
inline void AggregatedRecord::add_partition_key_table(const std::string& value) {
  partition_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(std::string&& value) {
  partition_key_table_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  partition_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline void AggregatedRecord::add_partition_key_table(const char* value, size_t size) {
  partition_key_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AggregatedRecord::partition_key_table() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return partition_key_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AggregatedRecord::mutable_partition_key_table() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.partition_key_table)
  return &partition_key_table_;
}

// repeated string explicit_hash_key_table = 2;
inline int AggregatedRecord::_internal_explicit_hash_key_table_size() const {
  return explicit_hash_key_table_.size();
}
inline int AggregatedRecord::explicit_hash_key_table_size() const {
  return _internal_explicit_hash_key_table_size();
}
inline void AggregatedRecord::clear_explicit_hash_key_table() {
  explicit_hash_key_table_.Clear();
}
inline std::string* AggregatedRecord::add_explicit_hash_key_table() {
  // @@protoc_insertion_point(field_add_mutable:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return _internal_add_explicit_hash_key_table();
}
inline const std::string& AggregatedRecord::_internal_explicit_hash_key_table(int index) const {
  return explicit_hash_key_table_.Get(index);
}
inline const std::string& AggregatedRecord::explicit_hash_key_table(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return _internal_explicit_hash_key_table(index);
}
inline std::string* AggregatedRecord::mutable_explicit_hash_key_table(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return explicit_hash_key_table_.Mutable(index);
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  explicit_hash_key_table_.Mutable(index)->assign(value);
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  explicit_hash_key_table_.Mutable(index)->assign(std::move(value));
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  explicit_hash_key_table_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::set_explicit_hash_key_table(int index, const char* value, size_t size) {
  explicit_hash_key_table_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline std::string* AggregatedRecord::_internal_add_explicit_hash_key_table() {
  return explicit_hash_key_table_.Add();
}
inline void AggregatedRecord::add_explicit_hash_key_table(const std::string& value) {
  explicit_hash_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(std::string&& value) {
  explicit_hash_key_table_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  explicit_hash_key_table_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline void AggregatedRecord::add_explicit_hash_key_table(const char* value, size_t size) {
  explicit_hash_key_table_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AggregatedRecord::explicit_hash_key_table() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return explicit_hash_key_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AggregatedRecord::mutable_explicit_hash_key_table() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.explicit_hash_key_table)
  return &explicit_hash_key_table_;
}

// repeated .aws.kinesis.protobuf.Record records = 3;
inline int AggregatedRecord::_internal_records_size() const {
  return records_.size();
}
inline int AggregatedRecord::records_size() const {
  return _internal_records_size();
}
inline void AggregatedRecord::clear_records() {
  records_.Clear();
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.AggregatedRecord.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Record >*
AggregatedRecord::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.AggregatedRecord.records)
  return &records_;
}
inline const ::aws::kinesis::protobuf::Record& AggregatedRecord::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::aws::kinesis::protobuf::Record& AggregatedRecord::records(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.AggregatedRecord.records)
  return _internal_records(index);
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::_internal_add_records() {
  return records_.Add();
}
inline ::aws::kinesis::protobuf::Record* AggregatedRecord::add_records() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.AggregatedRecord.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Record >&
AggregatedRecord::records() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.AggregatedRecord.records)
  return records_;
}

// -------------------------------------------------------------------

// Message

// required uint64 id = 1;
inline bool Message::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_id() const {
  return _internal_has_id();
}
inline void Message::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.id)
  return _internal_id();
}
inline void Message::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Message::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Message.id)
}

// optional uint64 source_id = 2;
inline bool Message::_internal_has_source_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_source_id() const {
  return _internal_has_source_id();
}
inline void Message::clear_source_id() {
  source_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_source_id() const {
  return source_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::source_id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.source_id)
  return _internal_source_id();
}
inline void Message::_internal_set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  source_id_ = value;
}
inline void Message::set_source_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Message.source_id)
}

// optional .aws.kinesis.protobuf.PutRecord put_record = 3;
inline bool Message::_internal_has_put_record() const {
  return actual_message_case() == kPutRecord;
}
inline bool Message::has_put_record() const {
  return _internal_has_put_record();
}
inline void Message::set_has_put_record() {
  _oneof_case_[0] = kPutRecord;
}
inline void Message::clear_put_record() {
  if (_internal_has_put_record()) {
    delete actual_message_.put_record_;
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::PutRecord* Message::release_put_record() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.put_record)
  if (_internal_has_put_record()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::PutRecord* temp = actual_message_.put_record_;
    actual_message_.put_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::PutRecord& Message::_internal_put_record() const {
  return _internal_has_put_record()
      ? *actual_message_.put_record_
      : *reinterpret_cast< ::aws::kinesis::protobuf::PutRecord*>(&::aws::kinesis::protobuf::_PutRecord_default_instance_);
}
inline const ::aws::kinesis::protobuf::PutRecord& Message::put_record() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.put_record)
  return _internal_put_record();
}
inline ::aws::kinesis::protobuf::PutRecord* Message::_internal_mutable_put_record() {
  if (!_internal_has_put_record()) {
    clear_actual_message();
    set_has_put_record();
    actual_message_.put_record_ = CreateMaybeMessage< ::aws::kinesis::protobuf::PutRecord >(
        GetArenaNoVirtual());
  }
  return actual_message_.put_record_;
}
inline ::aws::kinesis::protobuf::PutRecord* Message::mutable_put_record() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.put_record)
  return _internal_mutable_put_record();
}

// optional .aws.kinesis.protobuf.Flush flush = 4;
inline bool Message::_internal_has_flush() const {
  return actual_message_case() == kFlush;
}
inline bool Message::has_flush() const {
  return _internal_has_flush();
}
inline void Message::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
inline void Message::clear_flush() {
  if (_internal_has_flush()) {
    delete actual_message_.flush_;
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::Flush* Message::release_flush() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.flush)
  if (_internal_has_flush()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::Flush* temp = actual_message_.flush_;
    actual_message_.flush_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::Flush& Message::_internal_flush() const {
  return _internal_has_flush()
      ? *actual_message_.flush_
      : *reinterpret_cast< ::aws::kinesis::protobuf::Flush*>(&::aws::kinesis::protobuf::_Flush_default_instance_);
}
inline const ::aws::kinesis::protobuf::Flush& Message::flush() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.flush)
  return _internal_flush();
}
inline ::aws::kinesis::protobuf::Flush* Message::_internal_mutable_flush() {
  if (!_internal_has_flush()) {
    clear_actual_message();
    set_has_flush();
    actual_message_.flush_ = CreateMaybeMessage< ::aws::kinesis::protobuf::Flush >(
        GetArenaNoVirtual());
  }
  return actual_message_.flush_;
}
inline ::aws::kinesis::protobuf::Flush* Message::mutable_flush() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.flush)
  return _internal_mutable_flush();
}

// optional .aws.kinesis.protobuf.PutRecordResult put_record_result = 5;
inline bool Message::_internal_has_put_record_result() const {
  return actual_message_case() == kPutRecordResult;
}
inline bool Message::has_put_record_result() const {
  return _internal_has_put_record_result();
}
inline void Message::set_has_put_record_result() {
  _oneof_case_[0] = kPutRecordResult;
}
inline void Message::clear_put_record_result() {
  if (_internal_has_put_record_result()) {
    delete actual_message_.put_record_result_;
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::release_put_record_result() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.put_record_result)
  if (_internal_has_put_record_result()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::PutRecordResult* temp = actual_message_.put_record_result_;
    actual_message_.put_record_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::PutRecordResult& Message::_internal_put_record_result() const {
  return _internal_has_put_record_result()
      ? *actual_message_.put_record_result_
      : *reinterpret_cast< ::aws::kinesis::protobuf::PutRecordResult*>(&::aws::kinesis::protobuf::_PutRecordResult_default_instance_);
}
inline const ::aws::kinesis::protobuf::PutRecordResult& Message::put_record_result() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.put_record_result)
  return _internal_put_record_result();
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::_internal_mutable_put_record_result() {
  if (!_internal_has_put_record_result()) {
    clear_actual_message();
    set_has_put_record_result();
    actual_message_.put_record_result_ = CreateMaybeMessage< ::aws::kinesis::protobuf::PutRecordResult >(
        GetArenaNoVirtual());
  }
  return actual_message_.put_record_result_;
}
inline ::aws::kinesis::protobuf::PutRecordResult* Message::mutable_put_record_result() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.put_record_result)
  return _internal_mutable_put_record_result();
}

// optional .aws.kinesis.protobuf.Configuration configuration = 6;
inline bool Message::_internal_has_configuration() const {
  return actual_message_case() == kConfiguration;
}
inline bool Message::has_configuration() const {
  return _internal_has_configuration();
}
inline void Message::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline ::aws::kinesis::protobuf::Configuration* Message::release_configuration() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.configuration)
  if (_internal_has_configuration()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::Configuration* temp = actual_message_.configuration_;
    actual_message_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::Configuration& Message::_internal_configuration() const {
  return _internal_has_configuration()
      ? *actual_message_.configuration_
      : *reinterpret_cast< ::aws::kinesis::protobuf::Configuration*>(&::aws::kinesis::protobuf::_Configuration_default_instance_);
}
inline const ::aws::kinesis::protobuf::Configuration& Message::configuration() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.configuration)
  return _internal_configuration();
}
inline ::aws::kinesis::protobuf::Configuration* Message::_internal_mutable_configuration() {
  if (!_internal_has_configuration()) {
    clear_actual_message();
    set_has_configuration();
    actual_message_.configuration_ = CreateMaybeMessage< ::aws::kinesis::protobuf::Configuration >(
        GetArenaNoVirtual());
  }
  return actual_message_.configuration_;
}
inline ::aws::kinesis::protobuf::Configuration* Message::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.configuration)
  return _internal_mutable_configuration();
}

// optional .aws.kinesis.protobuf.MetricsRequest metrics_request = 7;
inline bool Message::_internal_has_metrics_request() const {
  return actual_message_case() == kMetricsRequest;
}
inline bool Message::has_metrics_request() const {
  return _internal_has_metrics_request();
}
inline void Message::set_has_metrics_request() {
  _oneof_case_[0] = kMetricsRequest;
}
inline void Message::clear_metrics_request() {
  if (_internal_has_metrics_request()) {
    delete actual_message_.metrics_request_;
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::release_metrics_request() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.metrics_request)
  if (_internal_has_metrics_request()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::MetricsRequest* temp = actual_message_.metrics_request_;
    actual_message_.metrics_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::MetricsRequest& Message::_internal_metrics_request() const {
  return _internal_has_metrics_request()
      ? *actual_message_.metrics_request_
      : *reinterpret_cast< ::aws::kinesis::protobuf::MetricsRequest*>(&::aws::kinesis::protobuf::_MetricsRequest_default_instance_);
}
inline const ::aws::kinesis::protobuf::MetricsRequest& Message::metrics_request() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.metrics_request)
  return _internal_metrics_request();
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::_internal_mutable_metrics_request() {
  if (!_internal_has_metrics_request()) {
    clear_actual_message();
    set_has_metrics_request();
    actual_message_.metrics_request_ = CreateMaybeMessage< ::aws::kinesis::protobuf::MetricsRequest >(
        GetArenaNoVirtual());
  }
  return actual_message_.metrics_request_;
}
inline ::aws::kinesis::protobuf::MetricsRequest* Message::mutable_metrics_request() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.metrics_request)
  return _internal_mutable_metrics_request();
}

// optional .aws.kinesis.protobuf.MetricsResponse metrics_response = 8;
inline bool Message::_internal_has_metrics_response() const {
  return actual_message_case() == kMetricsResponse;
}
inline bool Message::has_metrics_response() const {
  return _internal_has_metrics_response();
}
inline void Message::set_has_metrics_response() {
  _oneof_case_[0] = kMetricsResponse;
}
inline void Message::clear_metrics_response() {
  if (_internal_has_metrics_response()) {
    delete actual_message_.metrics_response_;
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::release_metrics_response() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.metrics_response)
  if (_internal_has_metrics_response()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::MetricsResponse* temp = actual_message_.metrics_response_;
    actual_message_.metrics_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::MetricsResponse& Message::_internal_metrics_response() const {
  return _internal_has_metrics_response()
      ? *actual_message_.metrics_response_
      : *reinterpret_cast< ::aws::kinesis::protobuf::MetricsResponse*>(&::aws::kinesis::protobuf::_MetricsResponse_default_instance_);
}
inline const ::aws::kinesis::protobuf::MetricsResponse& Message::metrics_response() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.metrics_response)
  return _internal_metrics_response();
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::_internal_mutable_metrics_response() {
  if (!_internal_has_metrics_response()) {
    clear_actual_message();
    set_has_metrics_response();
    actual_message_.metrics_response_ = CreateMaybeMessage< ::aws::kinesis::protobuf::MetricsResponse >(
        GetArenaNoVirtual());
  }
  return actual_message_.metrics_response_;
}
inline ::aws::kinesis::protobuf::MetricsResponse* Message::mutable_metrics_response() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.metrics_response)
  return _internal_mutable_metrics_response();
}

// optional .aws.kinesis.protobuf.SetCredentials set_credentials = 9;
inline bool Message::_internal_has_set_credentials() const {
  return actual_message_case() == kSetCredentials;
}
inline bool Message::has_set_credentials() const {
  return _internal_has_set_credentials();
}
inline void Message::set_has_set_credentials() {
  _oneof_case_[0] = kSetCredentials;
}
inline void Message::clear_set_credentials() {
  if (_internal_has_set_credentials()) {
    delete actual_message_.set_credentials_;
    clear_has_actual_message();
  }
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::release_set_credentials() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Message.set_credentials)
  if (_internal_has_set_credentials()) {
    clear_has_actual_message();
      ::aws::kinesis::protobuf::SetCredentials* temp = actual_message_.set_credentials_;
    actual_message_.set_credentials_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aws::kinesis::protobuf::SetCredentials& Message::_internal_set_credentials() const {
  return _internal_has_set_credentials()
      ? *actual_message_.set_credentials_
      : *reinterpret_cast< ::aws::kinesis::protobuf::SetCredentials*>(&::aws::kinesis::protobuf::_SetCredentials_default_instance_);
}
inline const ::aws::kinesis::protobuf::SetCredentials& Message::set_credentials() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Message.set_credentials)
  return _internal_set_credentials();
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::_internal_mutable_set_credentials() {
  if (!_internal_has_set_credentials()) {
    clear_actual_message();
    set_has_set_credentials();
    actual_message_.set_credentials_ = CreateMaybeMessage< ::aws::kinesis::protobuf::SetCredentials >(
        GetArenaNoVirtual());
  }
  return actual_message_.set_credentials_;
}
inline ::aws::kinesis::protobuf::SetCredentials* Message::mutable_set_credentials() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Message.set_credentials)
  return _internal_mutable_set_credentials();
}

inline bool Message::has_actual_message() const {
  return actual_message_case() != ACTUAL_MESSAGE_NOT_SET;
}
inline void Message::clear_has_actual_message() {
  _oneof_case_[0] = ACTUAL_MESSAGE_NOT_SET;
}
inline Message::ActualMessageCase Message::actual_message_case() const {
  return Message::ActualMessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PutRecord

// required string stream_name = 1;
inline bool PutRecord::_internal_has_stream_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PutRecord::has_stream_name() const {
  return _internal_has_stream_name();
}
inline void PutRecord::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutRecord::stream_name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.stream_name)
  return _internal_stream_name();
}
inline void PutRecord::set_stream_name(const std::string& value) {
  _internal_set_stream_name(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline std::string* PutRecord::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.stream_name)
  return _internal_mutable_stream_name();
}
inline const std::string& PutRecord::_internal_stream_name() const {
  return stream_name_.GetNoArena();
}
inline void PutRecord::_internal_set_stream_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRecord::set_stream_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline void PutRecord::set_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline void PutRecord::set_stream_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.stream_name)
}
inline std::string* PutRecord::_internal_mutable_stream_name() {
  _has_bits_[0] |= 0x00000001u;
  return stream_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRecord::release_stream_name() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.stream_name)
  if (!_internal_has_stream_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stream_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRecord::set_allocated_stream_name(std::string* stream_name) {
  if (stream_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.stream_name)
}

// required string partition_key = 2;
inline bool PutRecord::_internal_has_partition_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PutRecord::has_partition_key() const {
  return _internal_has_partition_key();
}
inline void PutRecord::clear_partition_key() {
  partition_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutRecord::partition_key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.partition_key)
  return _internal_partition_key();
}
inline void PutRecord::set_partition_key(const std::string& value) {
  _internal_set_partition_key(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline std::string* PutRecord::mutable_partition_key() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.partition_key)
  return _internal_mutable_partition_key();
}
inline const std::string& PutRecord::_internal_partition_key() const {
  return partition_key_.GetNoArena();
}
inline void PutRecord::_internal_set_partition_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  partition_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRecord::set_partition_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  partition_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline void PutRecord::set_partition_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  partition_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline void PutRecord::set_partition_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  partition_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.partition_key)
}
inline std::string* PutRecord::_internal_mutable_partition_key() {
  _has_bits_[0] |= 0x00000002u;
  return partition_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRecord::release_partition_key() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.partition_key)
  if (!_internal_has_partition_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return partition_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRecord::set_allocated_partition_key(std::string* partition_key) {
  if (partition_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  partition_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_key);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.partition_key)
}

// optional string explicit_hash_key = 3;
inline bool PutRecord::_internal_has_explicit_hash_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PutRecord::has_explicit_hash_key() const {
  return _internal_has_explicit_hash_key();
}
inline void PutRecord::clear_explicit_hash_key() {
  explicit_hash_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PutRecord::explicit_hash_key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  return _internal_explicit_hash_key();
}
inline void PutRecord::set_explicit_hash_key(const std::string& value) {
  _internal_set_explicit_hash_key(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline std::string* PutRecord::mutable_explicit_hash_key() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  return _internal_mutable_explicit_hash_key();
}
inline const std::string& PutRecord::_internal_explicit_hash_key() const {
  return explicit_hash_key_.GetNoArena();
}
inline void PutRecord::_internal_set_explicit_hash_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_hash_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRecord::set_explicit_hash_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  explicit_hash_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline void PutRecord::set_explicit_hash_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  explicit_hash_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline void PutRecord::set_explicit_hash_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  explicit_hash_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}
inline std::string* PutRecord::_internal_mutable_explicit_hash_key() {
  _has_bits_[0] |= 0x00000004u;
  return explicit_hash_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRecord::release_explicit_hash_key() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
  if (!_internal_has_explicit_hash_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return explicit_hash_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRecord::set_allocated_explicit_hash_key(std::string* explicit_hash_key) {
  if (explicit_hash_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  explicit_hash_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explicit_hash_key);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.explicit_hash_key)
}

// required bytes data = 4;
inline bool PutRecord::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PutRecord::has_data() const {
  return _internal_has_data();
}
inline void PutRecord::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PutRecord::data() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecord.data)
  return _internal_data();
}
inline void PutRecord::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecord.data)
}
inline std::string* PutRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecord.data)
  return _internal_mutable_data();
}
inline const std::string& PutRecord::_internal_data() const {
  return data_.GetNoArena();
}
inline void PutRecord::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRecord::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.PutRecord.data)
}
inline void PutRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecord.data)
}
inline void PutRecord::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecord.data)
}
inline std::string* PutRecord::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000008u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRecord::release_data() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecord.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRecord::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecord.data)
}

// -------------------------------------------------------------------

// Flush

// optional string stream_name = 1;
inline bool Flush::_internal_has_stream_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Flush::has_stream_name() const {
  return _internal_has_stream_name();
}
inline void Flush::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Flush::stream_name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Flush.stream_name)
  return _internal_stream_name();
}
inline void Flush::set_stream_name(const std::string& value) {
  _internal_set_stream_name(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Flush.stream_name)
}
inline std::string* Flush::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Flush.stream_name)
  return _internal_mutable_stream_name();
}
inline const std::string& Flush::_internal_stream_name() const {
  return stream_name_.GetNoArena();
}
inline void Flush::_internal_set_stream_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Flush::set_stream_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Flush.stream_name)
}
inline void Flush::set_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Flush.stream_name)
}
inline void Flush::set_stream_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stream_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Flush.stream_name)
}
inline std::string* Flush::_internal_mutable_stream_name() {
  _has_bits_[0] |= 0x00000001u;
  return stream_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Flush::release_stream_name() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Flush.stream_name)
  if (!_internal_has_stream_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stream_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Flush::set_allocated_stream_name(std::string* stream_name) {
  if (stream_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Flush.stream_name)
}

// -------------------------------------------------------------------

// Attempt

// required uint32 delay = 1;
inline bool Attempt::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Attempt::has_delay() const {
  return _internal_has_delay();
}
inline void Attempt::clear_delay() {
  delay_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attempt::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attempt::delay() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.delay)
  return _internal_delay();
}
inline void Attempt::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  delay_ = value;
}
inline void Attempt::set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.delay)
}

// required uint32 duration = 2;
inline bool Attempt::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Attempt::has_duration() const {
  return _internal_has_duration();
}
inline void Attempt::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attempt::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attempt::duration() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.duration)
  return _internal_duration();
}
inline void Attempt::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void Attempt::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.duration)
}

// required bool success = 3;
inline bool Attempt::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Attempt::has_success() const {
  return _internal_has_success();
}
inline void Attempt::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Attempt::_internal_success() const {
  return success_;
}
inline bool Attempt::success() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.success)
  return _internal_success();
}
inline void Attempt::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000010u;
  success_ = value;
}
inline void Attempt::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.success)
}

// optional string error_code = 4;
inline bool Attempt::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Attempt::has_error_code() const {
  return _internal_has_error_code();
}
inline void Attempt::clear_error_code() {
  error_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Attempt::error_code() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.error_code)
  return _internal_error_code();
}
inline void Attempt::set_error_code(const std::string& value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.error_code)
}
inline std::string* Attempt::mutable_error_code() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Attempt.error_code)
  return _internal_mutable_error_code();
}
inline const std::string& Attempt::_internal_error_code() const {
  return error_code_.GetNoArena();
}
inline void Attempt::_internal_set_error_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Attempt::set_error_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Attempt.error_code)
}
inline void Attempt::set_error_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Attempt.error_code)
}
inline void Attempt::set_error_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Attempt.error_code)
}
inline std::string* Attempt::_internal_mutable_error_code() {
  _has_bits_[0] |= 0x00000001u;
  return error_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attempt::release_error_code() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Attempt.error_code)
  if (!_internal_has_error_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attempt::set_allocated_error_code(std::string* error_code) {
  if (error_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_code);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Attempt.error_code)
}

// optional string error_message = 5;
inline bool Attempt::_internal_has_error_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Attempt::has_error_message() const {
  return _internal_has_error_message();
}
inline void Attempt::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Attempt::error_message() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Attempt.error_message)
  return _internal_error_message();
}
inline void Attempt::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Attempt.error_message)
}
inline std::string* Attempt::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Attempt.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& Attempt::_internal_error_message() const {
  return error_message_.GetNoArena();
}
inline void Attempt::_internal_set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Attempt::set_error_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Attempt.error_message)
}
inline void Attempt::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Attempt.error_message)
}
inline void Attempt::set_error_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Attempt.error_message)
}
inline std::string* Attempt::_internal_mutable_error_message() {
  _has_bits_[0] |= 0x00000002u;
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attempt::release_error_message() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Attempt.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return error_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attempt::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Attempt.error_message)
}

// -------------------------------------------------------------------

// PutRecordResult

// repeated .aws.kinesis.protobuf.Attempt attempts = 1;
inline int PutRecordResult::_internal_attempts_size() const {
  return attempts_.size();
}
inline int PutRecordResult::attempts_size() const {
  return _internal_attempts_size();
}
inline void PutRecordResult::clear_attempts() {
  attempts_.Clear();
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::mutable_attempts(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.attempts)
  return attempts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >*
PutRecordResult::mutable_attempts() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.PutRecordResult.attempts)
  return &attempts_;
}
inline const ::aws::kinesis::protobuf::Attempt& PutRecordResult::_internal_attempts(int index) const {
  return attempts_.Get(index);
}
inline const ::aws::kinesis::protobuf::Attempt& PutRecordResult::attempts(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.attempts)
  return _internal_attempts(index);
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::_internal_add_attempts() {
  return attempts_.Add();
}
inline ::aws::kinesis::protobuf::Attempt* PutRecordResult::add_attempts() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.PutRecordResult.attempts)
  return _internal_add_attempts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Attempt >&
PutRecordResult::attempts() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.PutRecordResult.attempts)
  return attempts_;
}

// required bool success = 2;
inline bool PutRecordResult::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PutRecordResult::has_success() const {
  return _internal_has_success();
}
inline void PutRecordResult::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PutRecordResult::_internal_success() const {
  return success_;
}
inline bool PutRecordResult::success() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.success)
  return _internal_success();
}
inline void PutRecordResult::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void PutRecordResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.success)
}

// optional string shard_id = 3;
inline bool PutRecordResult::_internal_has_shard_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PutRecordResult::has_shard_id() const {
  return _internal_has_shard_id();
}
inline void PutRecordResult::clear_shard_id() {
  shard_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PutRecordResult::shard_id() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.shard_id)
  return _internal_shard_id();
}
inline void PutRecordResult::set_shard_id(const std::string& value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline std::string* PutRecordResult::mutable_shard_id() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.shard_id)
  return _internal_mutable_shard_id();
}
inline const std::string& PutRecordResult::_internal_shard_id() const {
  return shard_id_.GetNoArena();
}
inline void PutRecordResult::_internal_set_shard_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRecordResult::set_shard_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  shard_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline void PutRecordResult::set_shard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  shard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline void PutRecordResult::set_shard_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  shard_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecordResult.shard_id)
}
inline std::string* PutRecordResult::_internal_mutable_shard_id() {
  _has_bits_[0] |= 0x00000001u;
  return shard_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRecordResult::release_shard_id() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecordResult.shard_id)
  if (!_internal_has_shard_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shard_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRecordResult::set_allocated_shard_id(std::string* shard_id) {
  if (shard_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shard_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shard_id);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecordResult.shard_id)
}

// optional string sequence_number = 4;
inline bool PutRecordResult::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PutRecordResult::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void PutRecordResult::clear_sequence_number() {
  sequence_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PutRecordResult::sequence_number() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  return _internal_sequence_number();
}
inline void PutRecordResult::set_sequence_number(const std::string& value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline std::string* PutRecordResult::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  return _internal_mutable_sequence_number();
}
inline const std::string& PutRecordResult::_internal_sequence_number() const {
  return sequence_number_.GetNoArena();
}
inline void PutRecordResult::_internal_set_sequence_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sequence_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRecordResult::set_sequence_number(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sequence_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline void PutRecordResult::set_sequence_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sequence_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline void PutRecordResult::set_sequence_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sequence_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}
inline std::string* PutRecordResult::_internal_mutable_sequence_number() {
  _has_bits_[0] |= 0x00000002u;
  return sequence_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRecordResult::release_sequence_number() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.PutRecordResult.sequence_number)
  if (!_internal_has_sequence_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sequence_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRecordResult::set_allocated_sequence_number(std::string* sequence_number) {
  if (sequence_number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sequence_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_number);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.PutRecordResult.sequence_number)
}

// -------------------------------------------------------------------

// Credentials

// required string akid = 1;
inline bool Credentials::_internal_has_akid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Credentials::has_akid() const {
  return _internal_has_akid();
}
inline void Credentials::clear_akid() {
  akid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Credentials::akid() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.akid)
  return _internal_akid();
}
inline void Credentials::set_akid(const std::string& value) {
  _internal_set_akid(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.akid)
}
inline std::string* Credentials::mutable_akid() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.akid)
  return _internal_mutable_akid();
}
inline const std::string& Credentials::_internal_akid() const {
  return akid_.GetNoArena();
}
inline void Credentials::_internal_set_akid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  akid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credentials::set_akid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  akid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Credentials.akid)
}
inline void Credentials::set_akid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  akid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Credentials.akid)
}
inline void Credentials::set_akid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  akid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Credentials.akid)
}
inline std::string* Credentials::_internal_mutable_akid() {
  _has_bits_[0] |= 0x00000001u;
  return akid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credentials::release_akid() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Credentials.akid)
  if (!_internal_has_akid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return akid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credentials::set_allocated_akid(std::string* akid) {
  if (akid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  akid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), akid);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.akid)
}

// required string secret_key = 2;
inline bool Credentials::_internal_has_secret_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Credentials::has_secret_key() const {
  return _internal_has_secret_key();
}
inline void Credentials::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Credentials::secret_key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.secret_key)
  return _internal_secret_key();
}
inline void Credentials::set_secret_key(const std::string& value) {
  _internal_set_secret_key(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.secret_key)
}
inline std::string* Credentials::mutable_secret_key() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.secret_key)
  return _internal_mutable_secret_key();
}
inline const std::string& Credentials::_internal_secret_key() const {
  return secret_key_.GetNoArena();
}
inline void Credentials::_internal_set_secret_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  secret_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credentials::set_secret_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  secret_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Credentials.secret_key)
}
inline void Credentials::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  secret_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Credentials.secret_key)
}
inline void Credentials::set_secret_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  secret_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Credentials.secret_key)
}
inline std::string* Credentials::_internal_mutable_secret_key() {
  _has_bits_[0] |= 0x00000002u;
  return secret_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credentials::release_secret_key() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Credentials.secret_key)
  if (!_internal_has_secret_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return secret_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credentials::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  secret_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.secret_key)
}

// optional string token = 3;
inline bool Credentials::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Credentials::has_token() const {
  return _internal_has_token();
}
inline void Credentials::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Credentials::token() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Credentials.token)
  return _internal_token();
}
inline void Credentials::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Credentials.token)
}
inline std::string* Credentials::mutable_token() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Credentials.token)
  return _internal_mutable_token();
}
inline const std::string& Credentials::_internal_token() const {
  return token_.GetNoArena();
}
inline void Credentials::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credentials::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Credentials.token)
}
inline void Credentials::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Credentials.token)
}
inline void Credentials::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Credentials.token)
}
inline std::string* Credentials::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000004u;
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credentials::release_token() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Credentials.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credentials::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Credentials.token)
}

// -------------------------------------------------------------------

// SetCredentials

// optional bool for_metrics = 1;
inline bool SetCredentials::_internal_has_for_metrics() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetCredentials::has_for_metrics() const {
  return _internal_has_for_metrics();
}
inline void SetCredentials::clear_for_metrics() {
  for_metrics_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SetCredentials::_internal_for_metrics() const {
  return for_metrics_;
}
inline bool SetCredentials::for_metrics() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.SetCredentials.for_metrics)
  return _internal_for_metrics();
}
inline void SetCredentials::_internal_set_for_metrics(bool value) {
  _has_bits_[0] |= 0x00000002u;
  for_metrics_ = value;
}
inline void SetCredentials::set_for_metrics(bool value) {
  _internal_set_for_metrics(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.SetCredentials.for_metrics)
}

// required .aws.kinesis.protobuf.Credentials credentials = 2;
inline bool SetCredentials::_internal_has_credentials() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || credentials_ != nullptr);
  return value;
}
inline bool SetCredentials::has_credentials() const {
  return _internal_has_credentials();
}
inline void SetCredentials::clear_credentials() {
  if (credentials_ != nullptr) credentials_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::aws::kinesis::protobuf::Credentials& SetCredentials::_internal_credentials() const {
  const ::aws::kinesis::protobuf::Credentials* p = credentials_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aws::kinesis::protobuf::Credentials*>(
      &::aws::kinesis::protobuf::_Credentials_default_instance_);
}
inline const ::aws::kinesis::protobuf::Credentials& SetCredentials::credentials() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.SetCredentials.credentials)
  return _internal_credentials();
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::release_credentials() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.SetCredentials.credentials)
  _has_bits_[0] &= ~0x00000001u;
  ::aws::kinesis::protobuf::Credentials* temp = credentials_;
  credentials_ = nullptr;
  return temp;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::_internal_mutable_credentials() {
  _has_bits_[0] |= 0x00000001u;
  if (credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::aws::kinesis::protobuf::Credentials>(GetArenaNoVirtual());
    credentials_ = p;
  }
  return credentials_;
}
inline ::aws::kinesis::protobuf::Credentials* SetCredentials::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.SetCredentials.credentials)
  return _internal_mutable_credentials();
}
inline void SetCredentials::set_allocated_credentials(::aws::kinesis::protobuf::Credentials* credentials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete credentials_;
  }
  if (credentials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      credentials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.SetCredentials.credentials)
}

// -------------------------------------------------------------------

// Dimension

// required string key = 1;
inline bool Dimension::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dimension::has_key() const {
  return _internal_has_key();
}
inline void Dimension::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dimension::key() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Dimension.key)
  return _internal_key();
}
inline void Dimension::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Dimension.key)
}
inline std::string* Dimension::mutable_key() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Dimension.key)
  return _internal_mutable_key();
}
inline const std::string& Dimension::_internal_key() const {
  return key_.GetNoArena();
}
inline void Dimension::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Dimension::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Dimension.key)
}
inline void Dimension::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Dimension.key)
}
inline void Dimension::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Dimension.key)
}
inline std::string* Dimension::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dimension::release_key() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Dimension.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dimension::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Dimension.key)
}

// required string value = 2;
inline bool Dimension::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dimension::has_value() const {
  return _internal_has_value();
}
inline void Dimension::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Dimension::value() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Dimension.value)
  return _internal_value();
}
inline void Dimension::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Dimension.value)
}
inline std::string* Dimension::mutable_value() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Dimension.value)
  return _internal_mutable_value();
}
inline const std::string& Dimension::_internal_value() const {
  return value_.GetNoArena();
}
inline void Dimension::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Dimension::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Dimension.value)
}
inline void Dimension::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Dimension.value)
}
inline void Dimension::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Dimension.value)
}
inline std::string* Dimension::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dimension::release_value() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Dimension.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dimension::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Dimension.value)
}

// -------------------------------------------------------------------

// Stats

// required double count = 1;
inline bool Stats::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Stats::has_count() const {
  return _internal_has_count();
}
inline void Stats::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Stats::_internal_count() const {
  return count_;
}
inline double Stats::count() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.count)
  return _internal_count();
}
inline void Stats::_internal_set_count(double value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void Stats::set_count(double value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.count)
}

// required double sum = 2;
inline bool Stats::_internal_has_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Stats::has_sum() const {
  return _internal_has_sum();
}
inline void Stats::clear_sum() {
  sum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Stats::_internal_sum() const {
  return sum_;
}
inline double Stats::sum() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.sum)
  return _internal_sum();
}
inline void Stats::_internal_set_sum(double value) {
  _has_bits_[0] |= 0x00000002u;
  sum_ = value;
}
inline void Stats::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.sum)
}

// required double mean = 3;
inline bool Stats::_internal_has_mean() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Stats::has_mean() const {
  return _internal_has_mean();
}
inline void Stats::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Stats::_internal_mean() const {
  return mean_;
}
inline double Stats::mean() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.mean)
  return _internal_mean();
}
inline void Stats::_internal_set_mean(double value) {
  _has_bits_[0] |= 0x00000004u;
  mean_ = value;
}
inline void Stats::set_mean(double value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.mean)
}

// required double min = 4;
inline bool Stats::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Stats::has_min() const {
  return _internal_has_min();
}
inline void Stats::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Stats::_internal_min() const {
  return min_;
}
inline double Stats::min() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.min)
  return _internal_min();
}
inline void Stats::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000008u;
  min_ = value;
}
inline void Stats::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.min)
}

// required double max = 5;
inline bool Stats::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Stats::has_max() const {
  return _internal_has_max();
}
inline void Stats::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Stats::_internal_max() const {
  return max_;
}
inline double Stats::max() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Stats.max)
  return _internal_max();
}
inline void Stats::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000010u;
  max_ = value;
}
inline void Stats::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Stats.max)
}

// -------------------------------------------------------------------

// Metric

// required string name = 1;
inline bool Metric::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metric::has_name() const {
  return _internal_has_name();
}
inline void Metric::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.name)
  return _internal_name();
}
inline void Metric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Metric.name)
}
inline std::string* Metric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.name)
  return _internal_mutable_name();
}
inline const std::string& Metric::_internal_name() const {
  return name_.GetNoArena();
}
inline void Metric::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Metric::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.Metric.name)
}
inline void Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.Metric.name)
}
inline void Metric::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.Metric.name)
}
inline std::string* Metric::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Metric.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Metric.name)
}

// repeated .aws.kinesis.protobuf.Dimension dimensions = 2;
inline int Metric::_internal_dimensions_size() const {
  return dimensions_.size();
}
inline int Metric::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void Metric::clear_dimensions() {
  dimensions_.Clear();
}
inline ::aws::kinesis::protobuf::Dimension* Metric::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.dimensions)
  return dimensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >*
Metric::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.Metric.dimensions)
  return &dimensions_;
}
inline const ::aws::kinesis::protobuf::Dimension& Metric::_internal_dimensions(int index) const {
  return dimensions_.Get(index);
}
inline const ::aws::kinesis::protobuf::Dimension& Metric::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.dimensions)
  return _internal_dimensions(index);
}
inline ::aws::kinesis::protobuf::Dimension* Metric::_internal_add_dimensions() {
  return dimensions_.Add();
}
inline ::aws::kinesis::protobuf::Dimension* Metric::add_dimensions() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.Metric.dimensions)
  return _internal_add_dimensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Dimension >&
Metric::dimensions() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.Metric.dimensions)
  return dimensions_;
}

// required .aws.kinesis.protobuf.Stats stats = 3;
inline bool Metric::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool Metric::has_stats() const {
  return _internal_has_stats();
}
inline void Metric::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::aws::kinesis::protobuf::Stats& Metric::_internal_stats() const {
  const ::aws::kinesis::protobuf::Stats* p = stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aws::kinesis::protobuf::Stats*>(
      &::aws::kinesis::protobuf::_Stats_default_instance_);
}
inline const ::aws::kinesis::protobuf::Stats& Metric::stats() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.stats)
  return _internal_stats();
}
inline ::aws::kinesis::protobuf::Stats* Metric::release_stats() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.Metric.stats)
  _has_bits_[0] &= ~0x00000002u;
  ::aws::kinesis::protobuf::Stats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::aws::kinesis::protobuf::Stats* Metric::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::aws::kinesis::protobuf::Stats>(GetArenaNoVirtual());
    stats_ = p;
  }
  return stats_;
}
inline ::aws::kinesis::protobuf::Stats* Metric::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.Metric.stats)
  return _internal_mutable_stats();
}
inline void Metric::set_allocated_stats(::aws::kinesis::protobuf::Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.Metric.stats)
}

// required uint64 seconds = 4;
inline bool Metric::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Metric::has_seconds() const {
  return _internal_has_seconds();
}
inline void Metric::clear_seconds() {
  seconds_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metric::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metric::seconds() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.Metric.seconds)
  return _internal_seconds();
}
inline void Metric::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_ = value;
}
inline void Metric::set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.Metric.seconds)
}

// -------------------------------------------------------------------

// MetricsRequest

// optional string name = 1;
inline bool MetricsRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetricsRequest::has_name() const {
  return _internal_has_name();
}
inline void MetricsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetricsRequest::name() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsRequest.name)
  return _internal_name();
}
inline void MetricsRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.MetricsRequest.name)
}
inline std::string* MetricsRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.MetricsRequest.name)
  return _internal_mutable_name();
}
inline const std::string& MetricsRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void MetricsRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MetricsRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aws.kinesis.protobuf.MetricsRequest.name)
}
inline void MetricsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aws.kinesis.protobuf.MetricsRequest.name)
}
inline void MetricsRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aws.kinesis.protobuf.MetricsRequest.name)
}
inline std::string* MetricsRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricsRequest::release_name() {
  // @@protoc_insertion_point(field_release:aws.kinesis.protobuf.MetricsRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aws.kinesis.protobuf.MetricsRequest.name)
}

// optional uint64 seconds = 2;
inline bool MetricsRequest::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetricsRequest::has_seconds() const {
  return _internal_has_seconds();
}
inline void MetricsRequest::clear_seconds() {
  seconds_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricsRequest::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricsRequest::seconds() const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsRequest.seconds)
  return _internal_seconds();
}
inline void MetricsRequest::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  seconds_ = value;
}
inline void MetricsRequest::set_seconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:aws.kinesis.protobuf.MetricsRequest.seconds)
}

// -------------------------------------------------------------------

// MetricsResponse

// repeated .aws.kinesis.protobuf.Metric metrics = 1;
inline int MetricsResponse::_internal_metrics_size() const {
  return metrics_.size();
}
inline int MetricsResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline void MetricsResponse::clear_metrics() {
  metrics_.Clear();
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:aws.kinesis.protobuf.MetricsResponse.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >*
MetricsResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:aws.kinesis.protobuf.MetricsResponse.metrics)
  return &metrics_;
}
inline const ::aws::kinesis::protobuf::Metric& MetricsResponse::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::aws::kinesis::protobuf::Metric& MetricsResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:aws.kinesis.protobuf.MetricsResponse.metrics)
  return _internal_metrics(index);
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::aws::kinesis::protobuf::Metric* MetricsResponse::add_metrics() {
  // @@protoc_insertion_point(field_add:aws.kinesis.protobuf.MetricsResponse.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aws::kinesis::protobuf::Metric >&
MetricsResponse::metrics() const {
  // @@protoc_insertion_point(field_list:aws.kinesis.protobuf.MetricsResponse.metrics)
  return metrics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace kinesis
}  // namespace aws

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
